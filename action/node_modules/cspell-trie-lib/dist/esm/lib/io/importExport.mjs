import { toDistributableIterable } from '@cspell/cspell-pipe';
import { genSequence } from 'gensequence';
import * as iv1 from './importExportV1.mjs';
import * as iv2 from './importExportV2.mjs';
import * as iv3 from './importExportV3.mjs';
import * as iv4 from './importExportV4.mjs';
const serializers = [
    iv1.serializeTrie,
    iv1.serializeTrie,
    iv2.serializeTrie,
    iv3.serializeTrie,
    iv4.serializeTrie,
];
const deserializers = [iv1.importTrie, iv1.importTrie, iv2.importTrie, iv3.importTrie, iv4.importTrie];
const DEFAULT_VERSION = 3;
/**
 * Serialize a TrieNode.
 * Note: This is destructive.  The node will no longer be usable.
 * Even though it is possible to preserve the trie, dealing with very large tries can consume a lot of memory.
 * Considering this is the last step before exporting, it was decided to let this be destructive.
 */
export function serializeTrie(root, options = 16) {
    const version = typeof options !== 'number' && options.version ? options.version : DEFAULT_VERSION;
    const method = serializers[version];
    if (!method) {
        throw new Error(`Unknown version: ${version}`);
    }
    return method(root, options);
}
export function importTrie(lines) {
    function parseHeaderRows(headerRows) {
        const header = headerRows.join('\n');
        const headerReg = /^\s*TrieXv(\d+)/m;
        const match = header.match(headerReg);
        if (!match)
            throw new Error('Unknown file format');
        return parseInt(match[1], 10);
    }
    function readHeader(iter) {
        const headerRows = [];
        for (const entry of iter) {
            const line = entry.trim();
            headerRows.push(line);
            if (line === iv1.DATA || line === iv2.DATA) {
                break;
            }
        }
        return headerRows;
    }
    const input = toDistributableIterable(lines);
    const headerLines = readHeader(input);
    const version = parseHeaderRows(headerLines);
    const stream = genSequence(headerLines).concat(input);
    const method = deserializers[version];
    if (!method) {
        throw new Error(`Unsupported version: ${version}`);
    }
    return method(stream);
}
