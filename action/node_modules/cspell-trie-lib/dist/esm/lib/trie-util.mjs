import { genSequence } from 'gensequence';
import { ChildMap, FLAG_WORD } from './TrieNode.mjs';
import { mergeOptionalWithDefaults } from './utils/mergeOptionalWithDefaults.mjs';
import { walker } from './walker/walker.mjs';
export function insert(text, node = {}) {
    if (text.length) {
        const head = text[0];
        const tail = text.slice(1);
        node.c = node.c || new ChildMap();
        node.c.set(head, insert(tail, node.c.get(head)));
    }
    else {
        node.f = (node.f || 0) | FLAG_WORD;
    }
    return node;
}
export function isWordTerminationNode(node) {
    return ((node.f || 0) & FLAG_WORD) === FLAG_WORD;
}
/**
 * Sorts the nodes in a trie in place.
 */
export function orderTrie(node) {
    if (!node.c)
        return;
    const nodes = [...node.c].sort(([a], [b]) => (a < b ? -1 : 1));
    node.c = new Map(nodes);
    for (const n of node.c) {
        orderTrie(n[1]);
    }
}
/**
 * Generator an iterator that will walk the Trie parent then children in a depth first fashion that preserves sorted order.
 */
export function walk(node) {
    return genSequence(walker(node));
}
export const iterateTrie = walk;
/**
 * Generate a Iterator that can walk a Trie and yield the words.
 */
export function iteratorTrieWords(node) {
    return walk(node)
        .filter((r) => isWordTerminationNode(r.node))
        .map((r) => r.text);
}
export function createTrieRoot(options) {
    const fullOptions = mergeOptionalWithDefaults(options);
    return {
        ...fullOptions,
        c: new Map(),
    };
}
export function createTriFromList(words, options) {
    const root = createTrieRoot(options);
    for (const word of words) {
        if (word.length) {
            insert(word, root);
        }
    }
    return root;
}
export function has(node, word) {
    let h = word.slice(0, 1);
    let t = word.slice(1);
    while (node.c && node.c.has(h)) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        node = node.c.get(h);
        h = t.slice(0, 1);
        t = t.slice(1);
    }
    return !h.length && !!((node.f || 0) & FLAG_WORD);
}
export function findNode(node, prefix) {
    let h = prefix.slice(0, 1);
    let t = prefix.slice(1);
    let n = node;
    while (h.length && n && n.c) {
        n = n.c.get(h);
        h = t.slice(0, 1);
        t = t.slice(1);
    }
    return n;
}
export function countNodes(root) {
    const seen = new Set();
    function walk(n) {
        if (seen.has(n))
            return;
        seen.add(n);
        if (n.c) {
            [...n.c.values()].forEach((n) => walk(n));
        }
    }
    walk(root);
    return seen.size;
}
export function countWords(root) {
    const visited = new Map();
    function walk(n) {
        if (visited.has(n)) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return visited.get(n);
        }
        let cnt = n.f ? 1 : 0;
        // add the node to the set to avoid getting stuck on circular references.
        visited.set(n, cnt);
        if (!n.c) {
            return cnt;
        }
        for (const c of n.c.values()) {
            cnt += walk(c);
        }
        visited.set(n, cnt);
        return cnt;
    }
    return walk(root);
}
export function isCircular(root) {
    const seen = new Set();
    const inStack = new Set();
    function walk(n) {
        if (seen.has(n))
            return { isCircular: false, allSeen: true };
        if (inStack.has(n))
            return { isCircular: true, allSeen: false };
        inStack.add(n);
        let r = { isCircular: false, allSeen: true };
        if (n.c) {
            r = [...n.c.values()].reduce((acc, n) => {
                if (acc.isCircular)
                    return acc;
                const r = walk(n);
                r.allSeen = r.allSeen && acc.allSeen;
                return r;
            }, r);
        }
        if (r.allSeen) {
            seen.add(n);
        }
        inStack.delete(n);
        return r;
    }
    return walk(root).isCircular;
}
export function trieNodeToRoot(node, options) {
    const newOptions = mergeOptionalWithDefaults(options);
    return {
        ...newOptions,
        c: node.c || new Map(),
    };
}
