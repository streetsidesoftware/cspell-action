import { CompoundWordsMethod } from '../walker/index.mjs';
export const defaultGenSuggestionOptions = {
    compoundMethod: CompoundWordsMethod.NONE,
    ignoreCase: true,
    changeLimit: 5,
};
export const defaultSuggestionOptions = {
    ...defaultGenSuggestionOptions,
    numSuggestions: 8,
    includeTies: true,
    timeout: 5000,
};
const keyMapOfGenSuggestionOptionsStrict = {
    changeLimit: 'changeLimit',
    compoundMethod: 'compoundMethod',
    ignoreCase: 'ignoreCase',
    compoundSeparator: 'compoundSeparator',
};
const keyMapOfSuggestionOptionsStrict = {
    ...keyMapOfGenSuggestionOptionsStrict,
    filter: 'filter',
    includeTies: 'includeTies',
    numSuggestions: 'numSuggestions',
    timeout: 'timeout',
    weightMap: 'weightMap',
};
/**
 * Create suggestion options using composition.
 * @param opts - partial options.
 * @returns Options - with defaults.
 */
export function createSuggestionOptions(...opts) {
    const options = { ...defaultSuggestionOptions };
    const keys = Object.keys(keyMapOfSuggestionOptionsStrict);
    for (const opt of opts) {
        for (const key of keys) {
            assign(options, opt, key);
        }
    }
    return options;
}
function assign(dest, src, k) {
    dest[k] = src[k] ?? dest[k];
}
