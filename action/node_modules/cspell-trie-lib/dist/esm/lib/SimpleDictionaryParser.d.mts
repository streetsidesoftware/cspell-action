import { type Operator } from '@cspell/cspell-pipe/sync';
import type { Trie } from './trie.mjs';
export interface ParseDictionaryOptions {
    compoundCharacter: string;
    optionalCompoundCharacter: string;
    forbiddenPrefix: string;
    caseInsensitivePrefix: string;
    /**
     * Start of a single-line comment.
     * @default "#"
     */
    commentCharacter: string;
    /**
     * If word starts with prefix, do not strip case or accents.
     * @default false;
     */
    keepExactPrefix: string;
    /**
     * Tell the parser to automatically create case / accent insensitive forms.
     * @default true
     */
    stripCaseAndAccents: boolean;
    /**
     * Tell the parser to keep non-case/accent version in both forms.
     * @default false
     */
    stripCaseAndAccentsKeepDuplicate: boolean;
    /**
     * Tell the parser to keep non-case/accent version in both forms.
     * @default false
     */
    stripCaseAndAccentsOnForbidden: boolean;
    /**
     * Tell the parser to split into words along spaces.
     * @default false
     */
    split: boolean;
    /**
     * When splitting tells the parser to output both the split and non-split versions of the line.
     * @default false
     */
    splitKeepBoth: boolean;
    /**
     * Specify the separator for splitting words.
     */
    splitSeparator: RegExp | string;
}
export declare const defaultParseDictionaryOptions: ParseDictionaryOptions;
export declare const cSpellToolDirective = "cspell-dictionary:";
export declare const setOfCSpellDirectiveFlags: string[];
/**
 * Normalizes a dictionary words based upon prefix / suffixes.
 * Case insensitive versions are also generated.
 * @param options - defines prefixes used when parsing lines.
 * @returns words that have been normalized.
 */
export declare function createDictionaryLineParserMapper(options?: Partial<ParseDictionaryOptions>): Operator<string>;
/**
 * Normalizes a dictionary words based upon prefix / suffixes.
 * Case insensitive versions are also generated.
 * @param lines - one word per line
 * @param _options - defines prefixes used when parsing lines.
 * @returns words that have been normalized.
 */
export declare function parseDictionaryLines(lines: Iterable<string> | string, options?: Partial<ParseDictionaryOptions>): Iterable<string>;
export declare function parseLinesToDictionary(lines: Iterable<string>, options?: Partial<ParseDictionaryOptions>): Trie;
export declare function parseDictionary(text: string, options?: Partial<ParseDictionaryOptions>): Trie;
declare function splitLine(line: string, regExp: RegExp | string): string[];
export declare const __testing__: {
    splitLine: typeof splitLine;
};
export {};
//# sourceMappingURL=SimpleDictionaryParser.d.mts.map