import { distanceAStarWeighted } from './distanceAStarWeighted.mjs';
import { levenshteinDistance } from './levenshtein.mjs';
import { addDefToWeightMap, createWeightMap } from './weightedMaps.mjs';
const defaultCost = 100;
/**
 * Calculate the edit distance between any two words.
 * Use the Damerauâ€“Levenshtein distance algorithm.
 * @param wordA
 * @param wordB
 * @param editCost - the cost of each edit (defaults to 100)
 * @returns the edit distance.
 */
export function editDistance(wordA, wordB, editCost = defaultCost) {
    return levenshteinDistance(wordA, wordB) * editCost;
}
/**
 * Calculate the weighted edit distance between any two words.
 * @param wordA
 * @param wordB
 * @param weights - the weights to use
 * @param editCost - the cost of each edit (defaults to 100)
 * @returns the edit distance
 */
export function editDistanceWeighted(wordA, wordB, weights, editCost = defaultCost) {
    return distanceAStarWeighted(wordA, wordB, weights, editCost);
}
/**
 * Collect Map definitions into a single weighted map.
 * @param defs - list of definitions
 * @returns A Weighted Map to be used with distance calculations.
 */
export function createWeightedMap(defs) {
    return createWeightMap(...defs);
}
/**
 * Update a WeightedMap with a WeightedMapDef
 * @param weightedMap - map to update
 * @param def - the definition to use
 */
export function updatedWeightedMap(weightedMap, def) {
    addDefToWeightMap(weightedMap, def);
}
