import { opFlatten, opMap, pipeSync } from '@cspell/cspell-pipe/sync';
import { parseLocale } from '../models/locale/index.mjs';
import { isDefined } from '../utils/util.mjs';
import { mapEditCosts } from './mapCosts.mjs';
import { hunspellInformationToSuggestionCostDef } from './mapHunspellInformation.mjs';
import { calcFirstCharacterReplaceDefs, parseAccents, parseAlphabet } from './mapToSuggestionCostDef.mjs';
export function mapDictionaryInformation(dictInfo) {
    const _locale = dictInfo.locale;
    const locale = _locale ? parseLocale(_locale).filter((loc) => loc.isValid()) : undefined;
    const locales = locale?.map((loc) => loc.locale);
    const costs = mapEditCosts(dictInfo.costs);
    const defsEC = dictInfo.suggestionEditCosts || [];
    const defsHI = dictInfo.hunspellInformation
        ? hunspellInformationToSuggestionCostDef(dictInfo.hunspellInformation, locale)
        : [];
    return [
        ...defsEC,
        ...processAlphabet(dictInfo.alphabet, locales, costs),
        ...processAccents(dictInfo.accents, costs),
        ...defsHI,
    ];
}
function processAlphabet(alphabet, locale, editCost) {
    const csAlphabet = toCharSets(alphabet, 'a-zA-Z', editCost.baseCost);
    return [
        ...pipeSync(csAlphabet, opMap((cs) => parseAlphabet(cs, locale, editCost)), opFlatten()),
        ...calcFirstCharacterReplaceDefs(csAlphabet, editCost),
    ];
}
function toCharSets(cs, defaultValue, cost, penalty) {
    cs = cs ?? defaultValue;
    if (!cs)
        return [];
    if (typeof cs === 'string') {
        cs = [
            {
                characters: cs,
                cost,
            },
        ];
    }
    if (penalty !== undefined) {
        cs.forEach((cs) => (cs.penalty = penalty));
    }
    return cs;
}
function processAccents(accents, editCost) {
    const cs = toCharSets(accents, '\u0300-\u0341', editCost.accentCosts);
    return cs.map((cs) => parseAccents(cs, editCost)).filter(isDefined);
}
export function mapDictionaryInformationToAdjustment(dictInfo) {
    if (!dictInfo.adjustments)
        return [];
    return dictInfo.adjustments.map(mapAdjustment);
}
function mapAdjustment(adj) {
    const { id, regexp, penalty } = adj;
    return {
        id: id,
        regexp: new RegExp(regexp),
        penalty,
    };
}
