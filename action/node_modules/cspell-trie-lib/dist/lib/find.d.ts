import { TrieNode } from './TrieNode';
export declare type CompoundModes = 'none' | 'compound' | 'legacy';
export interface FindOptions {
    matchCase: boolean;
    compoundMode: CompoundModes;
    forbidPrefix: string;
    compoundFix: string;
    caseInsensitivePrefix: string;
}
export declare type PartialFindOptions = Partial<FindOptions> | undefined;
export interface FindNodeResult {
    node: TrieNode | undefined;
}
export interface FindResult {
    found: string | false;
    compoundUsed: boolean;
}
export interface FindFullNodeResult extends FindNodeResult, FindResult {
}
export interface FindFullResult extends FindResult {
    forbidden: boolean;
}
/**
 *
 * @param root Trie root node. root.c contains the compound root and forbidden root.
 * @param word A pre normalized word use `normalizeWord` or `normalizeWordToLowercase`
 * @param options
 */
export declare function findWord(root: TrieNode, word: string, options?: PartialFindOptions): FindFullResult;
export declare function findCompoundNode(root: TrieNode | undefined, word: string, compoundCharacter: string): FindFullNodeResult;
export declare function findCompoundWord(root: TrieNode | undefined, word: string, compoundCharacter: string): FindResult;
export declare function findWordExact(root: TrieNode | undefined, word: string): boolean;
export declare function findNodeExact(root: TrieNode | undefined, word: string): FindNodeResult;
export declare function findLegacyCompoundNode(root: TrieNode | undefined, word: string, minCompoundLength: number): FindFullNodeResult;
export declare function findLegacyCompoundWord(root: TrieNode | undefined, word: string, minCompoundLength?: number): FindResult;
export declare function isForbiddenWord(root: TrieNode | undefined, word: string, forbiddenPrefix: string): boolean;
