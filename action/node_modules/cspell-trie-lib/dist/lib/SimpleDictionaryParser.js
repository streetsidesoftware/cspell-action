"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDictionary = exports.parseDictionaryLines = exports.defaultParseDictionaryOptions = void 0;
const gensequence_1 = require("gensequence");
const util_1 = require("./util");
const constants_1 = require("./constants");
const TrieBuilder_1 = require("./TrieBuilder");
const _defaultOptions = {
    commentCharacter: constants_1.LINE_COMMENT,
    optionalCompoundCharacter: constants_1.OPTIONAL_COMPOUND_FIX,
    compoundCharacter: constants_1.COMPOUND_FIX,
    forbiddenPrefix: constants_1.FORBID_PREFIX,
    caseInsensitivePrefix: constants_1.CASE_INSENSITIVE_PREFIX,
};
exports.defaultParseDictionaryOptions = Object.freeze(_defaultOptions);
function parseDictionaryLines(lines, options = _defaultOptions) {
    const { commentCharacter, optionalCompoundCharacter: optionalCompound, compoundCharacter: compound, caseInsensitivePrefix: ignoreCase, forbiddenPrefix: forbidden, } = options;
    const regexComment = new RegExp(escapeRegEx(commentCharacter) + '.*', 'g');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function filterLines(line) {
        return typeof line === 'string';
    }
    function removeComments(line) {
        return line.replace(regexComment, '').trim();
    }
    function filterEmptyLines(line) {
        return !!line;
    }
    function* mapOptionalPrefix(line) {
        if (line[0] === optionalCompound) {
            const t = line.slice(1);
            yield t;
            yield compound + t;
        }
        else {
            yield line;
        }
    }
    function* mapOptionalSuffix(line) {
        if (line.slice(-1) === optionalCompound) {
            const t = line.slice(0, -1);
            yield t;
            yield t + compound;
        }
        else {
            yield line;
        }
    }
    function* mapNormalize(line) {
        yield util_1.normalizeWord(line);
        if (line[0] !== forbidden)
            yield ignoreCase + util_1.normalizeWordToLowercase(line);
    }
    const processLines = gensequence_1.operators.pipe(gensequence_1.operators.filter(filterLines), gensequence_1.operators.map(removeComments), gensequence_1.operators.filter(filterEmptyLines), gensequence_1.operators.concatMap(mapOptionalPrefix), gensequence_1.operators.concatMap(mapOptionalSuffix), gensequence_1.operators.concatMap(mapNormalize));
    return processLines(lines);
}
exports.parseDictionaryLines = parseDictionaryLines;
function parseDictionary(text, options = _defaultOptions) {
    const lines = parseDictionaryLines(text.split('\n'), options);
    return TrieBuilder_1.buildTrieFast([...new Set(lines)].sort(), {
        compoundCharacter: options.compoundCharacter,
        forbiddenWordPrefix: options.forbiddenPrefix,
        stripCaseAndAccentsPrefix: options.caseInsensitivePrefix,
    });
}
exports.parseDictionary = parseDictionary;
function escapeRegEx(s) {
    return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
}
//# sourceMappingURL=SimpleDictionaryParser.js.map