"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReporter = void 0;
const chalk = require("chalk");
const cspell_lib_1 = require("cspell-lib");
const path = __importStar(require("path"));
const templateIssue = `{green $uri}:{yellow $row:$col} - $message ({red $text})`;
const templateIssueWithSuggestions = `{green $uri}:{yellow $row:$col} - $message ({red $text}) Suggestions: {yellow [$suggestions]}`;
const templateIssueWithContext = `{green $uri}:{yellow $row:$col} $padRowCol- $message ({red $text})$padContext -- {gray $contextLeft}{red {underline $text}}{gray $contextRight}`;
const templateIssueWithContextWithSuggestions = `{green $uri}:{yellow $row:$col} $padRowCol- $message ({red $text})$padContext -- {gray $contextLeft}{red {underline $text}}{gray $contextRight}\n\t Suggestions: {yellow [$suggestions]}`;
const templateIssueLegacy = `${chalk.green('$uri')}[$row, $col]: $message: ${chalk.red('$text')}`;
const templateIssueWordsOnly = '$text';
function genIssueEmitter(template) {
    const defaultWidth = 10;
    let maxWidth = defaultWidth;
    let uri;
    return function issueEmitter(issue) {
        if (uri !== issue.uri) {
            maxWidth = defaultWidth;
            uri = issue.uri;
        }
        maxWidth = Math.max(maxWidth * 0.999, issue.text.length, 10);
        console.log(formatIssue(template, issue, Math.ceil(maxWidth)));
    };
}
function errorEmitter(message, error) {
    if ((0, cspell_lib_1.isSpellingDictionaryLoadError)(error)) {
        error = error.cause;
    }
    console.error(chalk.red(message), error.toString());
}
function nullEmitter() {
    /* empty */
}
function relativeFilename(filename, cwd = process.cwd()) {
    const rel = path.relative(cwd, filename);
    if (rel.startsWith('..'))
        return filename;
    return '.' + path.sep + rel;
}
function reportProgress(p) {
    if (p.type !== 'ProgressFileComplete') {
        return;
    }
    const fc = '' + p.fileCount;
    const fn = (' '.repeat(fc.length) + p.fileNum).slice(-fc.length);
    const idx = fn + '/' + fc;
    const filename = chalk.gray(relativeFilename(p.filename));
    const time = reportTime(p.elapsedTimeMs);
    const skipped = p.processed === false ? ' skipped' : '';
    const hasErrors = p.numErrors ? chalk.red ` X` : '';
    console.error(`${idx} ${filename} ${time}${skipped}${hasErrors}`);
}
function reportTime(elapsedTimeMs) {
    if (elapsedTimeMs === undefined)
        return '-';
    const color = elapsedTimeMs < 1000 ? chalk.white : elapsedTimeMs < 2000 ? chalk.yellow : chalk.redBright;
    return color(elapsedTimeMs.toFixed(2) + 'ms');
}
function getReporter(options) {
    const issueTemplate = options.wordsOnly
        ? templateIssueWordsOnly
        : options.legacy
            ? templateIssueLegacy
            : options.showContext
                ? options.showSuggestions
                    ? templateIssueWithContextWithSuggestions
                    : templateIssueWithContext
                : options.showSuggestions
                    ? templateIssueWithSuggestions
                    : templateIssue;
    const { files, silent, summary, issues, progress, verbose, debug } = options;
    const emitters = {
        Debug: !silent && debug ? (s) => console.info(chalk.cyan(s)) : nullEmitter,
        Info: !silent && verbose ? (s) => console.info(chalk.yellow(s)) : nullEmitter,
        Warning: (s) => console.info(chalk.yellow(s)),
    };
    function infoEmitter(message, msgType) {
        var _a;
        (_a = emitters[msgType]) === null || _a === void 0 ? void 0 : _a.call(emitters, message);
    }
    const root = options.root || process.cwd();
    function relativeIssue(fn) {
        if (!options.relative)
            return fn;
        return (i) => {
            const r = { ...i };
            r.uri = r.uri ? relativeFilename(r.uri, root) : r.uri;
            fn(r);
        };
    }
    const resultEmitter = (result) => {
        if (!files.length && !result.files) {
            return;
        }
        console.error('CSpell: Files checked: %d, Issues found: %d in %d files', result.files, result.issues, result.filesWithIssues.size);
    };
    return {
        issue: relativeIssue(silent || !issues ? nullEmitter : genIssueEmitter(issueTemplate)),
        error: silent ? nullEmitter : errorEmitter,
        info: infoEmitter,
        debug: emitters.Debug,
        progress: !silent && progress ? reportProgress : nullEmitter,
        result: !silent && summary ? resultEmitter : nullEmitter,
    };
}
exports.getReporter = getReporter;
function formatIssue(templateStr, issue, maxIssueTextWidth) {
    var _a;
    function clean(t) {
        return t.replace(/\s+/, ' ');
    }
    const { uri = '', row, col, text, context, offset } = issue;
    const contextLeft = clean(context.text.slice(0, offset - context.offset));
    const contextRight = clean(context.text.slice(offset + text.length - context.offset));
    const contextFull = clean(context.text);
    const padContext = ' '.repeat(Math.max(maxIssueTextWidth - text.length, 0));
    const rowText = row.toString();
    const colText = col.toString();
    const padRowCol = ' '.repeat(Math.max(1, 8 - (rowText.length + colText.length)));
    const suggestions = ((_a = issue.suggestions) === null || _a === void 0 ? void 0 : _a.join(', ')) || '';
    const message = issue.isFlagged ? '{yellow Forbidden word}' : 'Unknown word';
    const t = template(templateStr.replace(/\$message/g, message));
    return chalk(t)
        .replace(/\$\{col\}/g, colText)
        .replace(/\$\{row\}/g, rowText)
        .replace(/\$\{text\}/g, text)
        .replace(/\$\{uri\}/g, uri)
        .replace(/\$col/g, colText)
        .replace(/\$contextFull/g, contextFull)
        .replace(/\$contextLeft/g, contextLeft)
        .replace(/\$contextRight/g, contextRight)
        .replace(/\$padContext/g, padContext)
        .replace(/\$padRowCol/g, padRowCol)
        .replace(/\$row/g, rowText)
        .replace(/\$suggestions/g, suggestions)
        .replace(/\$text/g, text)
        .replace(/\$uri/g, uri);
}
class TS extends Array {
    constructor(s) {
        super(s);
        this.raw = [s];
    }
}
function template(s) {
    return new TS(s);
}
//# sourceMappingURL=cli-reporter.js.map