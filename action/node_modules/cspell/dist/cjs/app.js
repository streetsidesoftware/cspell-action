"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.CheckFailed = void 0;
const commander_1 = require("commander");
const semver_1 = require("semver");
const pkgInfo_cjs_1 = require("../lib/pkgInfo.cjs");
const commandCheck_js_1 = require("./commandCheck.js");
const commandLink_js_1 = require("./commandLink.js");
const commandLint_js_1 = require("./commandLint.js");
const commandSuggestion_js_1 = require("./commandSuggestion.js");
const commandTrace_js_1 = require("./commandTrace.js");
const errors_js_1 = require("./util/errors.js");
var errors_js_2 = require("./util/errors.js");
Object.defineProperty(exports, "CheckFailed", { enumerable: true, get: function () { return errors_js_2.CheckFailed; } });
async function run(command, argv) {
    const prog = command || commander_1.program;
    const args = argv || process.argv;
    prog.exitOverride();
    prog.version(pkgInfo_cjs_1.npmPackage.version).description('Spelling Checker for Code').name('cspell');
    if (!(0, semver_1.satisfies)(process.versions.node, pkgInfo_cjs_1.npmPackage.engines.node)) {
        throw new errors_js_1.ApplicationError(`Unsupported NodeJS version (${process.versions.node}); ${pkgInfo_cjs_1.npmPackage.engines.node} is required`);
    }
    const optionFlags = new commander_1.Option('-f,--flag <flag:value>', 'Declare an execution flag value')
        .hideHelp()
        .argParser((value, prev) => prev?.concat(value) || [value]);
    (0, commandLint_js_1.commandLint)(prog).addOption(optionFlags);
    (0, commandTrace_js_1.commandTrace)(prog).addOption(optionFlags);
    (0, commandCheck_js_1.commandCheck)(prog).addOption(optionFlags);
    (0, commandSuggestion_js_1.commandSuggestion)(prog).addOption(optionFlags);
    (0, commandLink_js_1.commandLink)(prog);
    /*
        program
            .command('init')
            .description('(Alpha) Initialize a cspell.json file.')
            .option('-o, --output <cspell.json>', 'define where to write file.')
            .option('--extends <cspell.json>', 'extend an existing cspell.json file.')
            .action((options: InitOptions) => {
                showHelp = false;
                CSpellApplication.createInit(options).then(
                    () => process.exit(0),
                    () => process.exit(1)
                );
                console.log('Init');
            });
    */
    prog.exitOverride();
    await prog.parseAsync(args);
}
exports.run = run;
//# sourceMappingURL=app.js.map