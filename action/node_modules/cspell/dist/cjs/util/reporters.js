"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.finalizeReporter = exports.loadReporters = exports.mergeReporters = void 0;
const dynamic_import_1 = require("@cspell/dynamic-import");
const pkgInfo_cjs_1 = require("../../lib/pkgInfo.cjs");
const errors_js_1 = require("./errors.js");
function callAll(methods) {
    return (...p) => {
        for (const method of methods) {
            method(...p);
        }
        return;
    };
}
function extractEmitter(reporters, emitterName) {
    // The `bind` is used in case the reporter is a class.
    return reporters
        .map((r) => r[emitterName]?.bind(r))
        .filter((r) => !!r);
}
function mergeResultEmitters(reporters) {
    return async (result) => {
        await Promise.all(reporters.map((reporter) => reporter.result?.(result)));
    };
}
/**
 * Mergers several cspell reporters into a single one
 */
function mergeReporters(...reporters) {
    return {
        issue: callAll(extractEmitter(reporters, 'issue')),
        info: callAll(extractEmitter(reporters, 'info')),
        debug: callAll(extractEmitter(reporters, 'debug')),
        progress: callAll(extractEmitter(reporters, 'progress')),
        error: callAll(extractEmitter(reporters, 'error')),
        result: mergeResultEmitters(reporters),
    };
}
exports.mergeReporters = mergeReporters;
/**
 * Loads reporter modules configured in cspell config file
 */
async function loadReporters(reporters, defaultReporter, config) {
    async function loadReporter(reporterSettings) {
        if (reporterSettings === 'default')
            return defaultReporter;
        if (!Array.isArray(reporterSettings)) {
            reporterSettings = [reporterSettings];
        }
        const [moduleName, settings] = reporterSettings;
        try {
            const { getReporter } = await (0, dynamic_import_1.dynamicImport)(moduleName, [process.cwd(), pkgInfo_cjs_1.pkgDir]);
            return getReporter(settings, config);
        }
        catch (e) {
            throw new errors_js_1.ApplicationError(`Failed to load reporter ${moduleName}: ${(0, errors_js_1.toError)(e).message}`);
        }
    }
    reporters = !reporters || !reporters.length ? ['default'] : [...reporters];
    const loadedReporters = await Promise.all(reporters.map(loadReporter));
    return loadedReporters.filter((v) => v !== undefined);
}
exports.loadReporters = loadReporters;
function finalizeReporter(reporter) {
    return reporter && mergeReporters(reporter);
}
exports.finalizeReporter = finalizeReporter;
//# sourceMappingURL=reporters.js.map