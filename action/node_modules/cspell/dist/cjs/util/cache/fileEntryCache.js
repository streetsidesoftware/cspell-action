"use strict";
/**
 * This is a wrapper for 'file-entry-cache'
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizePath = exports.createFromFile = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const worker_threads_1 = require("worker_threads");
const fec = __importStar(require("../../../lib/file-entry-cache.cjs"));
function createFromFile(pathToCache, useCheckSum, useRelative) {
    const absPathToCache = path.resolve(pathToCache);
    const relDir = path.dirname(absPathToCache);
    (0, fs_1.mkdirSync)(relDir, { recursive: true });
    const create = wrap(() => fec.createFromFile(absPathToCache, useCheckSum));
    const feCache = create();
    const cacheWrapper = {
        get cache() {
            return feCache.cache;
        },
        getHash(buffer) {
            return feCache.getHash(buffer);
        },
        hasFileChanged: wrap((cwd, file) => {
            console.log(file);
            return feCache.hasFileChanged(resolveFile(cwd, file));
        }),
        analyzeFiles: wrap((cwd, files) => {
            return feCache.analyzeFiles(resolveFiles(cwd, files));
        }),
        getFileDescriptor: wrap((cwd, file) => {
            return feCache.getFileDescriptor(resolveFile(cwd, file));
        }),
        getUpdatedFiles: wrap((cwd, files) => {
            return feCache.getUpdatedFiles(resolveFiles(cwd, files));
        }),
        normalizeEntries: wrap((cwd, files) => {
            return feCache.normalizeEntries(resolveFiles(cwd, files));
        }),
        removeEntry: wrap((cwd, file) => {
            console.log(file);
            return feCache.removeEntry(resolveFile(cwd, file));
        }),
        deleteCacheFile() {
            feCache.deleteCacheFile();
        },
        destroy() {
            feCache.destroy();
        },
        reconcile: wrap((_cwd, noPrune) => {
            feCache.reconcile(noPrune);
        }),
    };
    return cacheWrapper;
    function resolveFile(cwd, file) {
        if (!useRelative)
            return file;
        const r = path.relative(relDir, path.resolve(cwd, file));
        return normalizePath(r);
    }
    function resolveFiles(cwd, files) {
        return files?.map((file) => resolveFile(cwd, file));
    }
    function wrap(fn) {
        return (...params) => {
            const cwd = process.cwd();
            try {
                worker_threads_1.isMainThread && process.chdir(relDir);
                return fn(cwd, ...params);
            }
            finally {
                worker_threads_1.isMainThread && process.chdir(cwd);
            }
        };
    }
}
exports.createFromFile = createFromFile;
function normalizePath(filePath) {
    return filePath;
    // if (path.sep !== '\\') return filePath;
    // return filePath.replace(/\\/g, '/');
}
exports.normalizePath = normalizePath;
//# sourceMappingURL=fileEntryCache.js.map