"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNotDir = exports.isDir = exports.isFile = exports.readFileListFile = exports.readFileListFiles = exports.calcFinalConfigInfo = exports.findFiles = exports.readFile = exports.readFileInfo = exports.resolveFilename = exports.isBinaryFile = exports.filenameToUri = exports.filenameToUrlString = exports.fileInfoToDocument = exports.readConfig = void 0;
const cspell_io_1 = require("cspell-io");
const cspell = __importStar(require("cspell-lib"));
const cspell_lib_1 = require("cspell-lib");
const fs_1 = require("fs");
const get_stdin_1 = __importDefault(require("get-stdin"));
const path = __importStar(require("path"));
const url_1 = require("url");
const uri_cjs_1 = require("../../lib/uri.cjs");
const async_js_1 = require("./async.js");
const constants_js_1 = require("./constants.js");
const errors_js_1 = require("./errors.js");
const glob_js_1 = require("./glob.js");
const stdin_js_1 = require("./stdin.js");
const util_js_1 = require("./util.js");
const doesMatchUrl = /^(file|stdin|https?):\/\//;
async function readConfig(configFile, root) {
    if (configFile) {
        const config = (await cspell.loadConfig(configFile)) || {};
        return { source: configFile, config };
    }
    const config = await cspell.searchForConfig(root);
    return { source: config?.__importRef?.filename || 'None found', config: config || {} };
}
exports.readConfig = readConfig;
function fileInfoToDocument(fileInfo, languageId, locale) {
    const { filename, text } = fileInfo;
    languageId = languageId || undefined;
    locale = locale || undefined;
    const uri = filenameToUrlString(filename);
    if (uri.startsWith(constants_js_1.STDINProtocol)) {
        return (0, util_js_1.clean)({
            uri,
            text,
            languageId,
            locale,
        });
    }
    return (0, cspell_lib_1.fileToDocument)(uri, text, languageId, locale);
}
exports.fileInfoToDocument = fileInfoToDocument;
function filenameToUrlString(filename, cwd = '.') {
    if (filename === constants_js_1.STDIN)
        return 'stdin:///';
    if (filename.startsWith(constants_js_1.STDINProtocol)) {
        const filePath = filename.slice(constants_js_1.STDINProtocol.length);
        const fullPath = path.resolve(cwd, filePath);
        return (0, url_1.pathToFileURL)(fullPath).toString();
    }
    if (doesMatchUrl.test(filename))
        return filename;
    return (0, url_1.pathToFileURL)(path.resolve(cwd, filename)).toString();
}
exports.filenameToUrlString = filenameToUrlString;
function filenameToUri(filename, cwd) {
    return uri_cjs_1.URI.parse(filenameToUrlString(filename, cwd));
}
exports.filenameToUri = filenameToUri;
function isBinaryFile(filename, cwd) {
    const uri = filenameToUri(filename, cwd);
    if (uri.scheme.startsWith('stdin'))
        return false;
    return (0, cspell_lib_1.isBinaryFile)(uri);
}
exports.isBinaryFile = isBinaryFile;
function resolveFilename(filename, cwd) {
    cwd = cwd || process.cwd();
    if (filename === constants_js_1.STDIN)
        return constants_js_1.STDINProtocol;
    if (filename.startsWith(constants_js_1.FileProtocol)) {
        const url = new URL(filename.slice(constants_js_1.FileProtocol.length), (0, url_1.pathToFileURL)(cwd + path.sep));
        return (0, url_1.fileURLToPath)(url);
    }
    const scheme = filename.startsWith(constants_js_1.STDINProtocol) ? constants_js_1.STDINProtocol : '';
    const pathname = filename.slice(scheme.length);
    return scheme + path.resolve(cwd, pathname);
}
exports.resolveFilename = resolveFilename;
function readFileInfo(filename, encoding = constants_js_1.UTF8, handleNotFound = false) {
    filename = resolveFilename(filename);
    const pText = filename.startsWith(constants_js_1.STDINProtocol) ? (0, get_stdin_1.default)() : (0, cspell_io_1.readFile)(filename, encoding);
    return pText.then((text) => ({ text, filename }), (e) => {
        const error = (0, errors_js_1.toError)(e);
        return handleNotFound && error.code === 'EISDIR'
            ? Promise.resolve({ text: '', filename, errorCode: error.code })
            : handleNotFound && error.code === 'ENOENT'
                ? Promise.resolve({ text: '', filename, errorCode: error.code })
                : Promise.reject(new errors_js_1.IOError(`Error reading file: "${filename}"`, error));
    });
}
exports.readFileInfo = readFileInfo;
function readFile(filename, encoding = constants_js_1.UTF8) {
    return readFileInfo(filename, encoding).then((info) => info.text);
}
exports.readFile = readFile;
/**
 * Looks for matching glob patterns or stdin
 * @param globPatterns patterns or stdin
 */
async function findFiles(globPatterns, options) {
    const stdin = [];
    const globPats = globPatterns.filter((filename) => filename !== constants_js_1.STDIN && !filename.startsWith(constants_js_1.STDINProtocol) && !filename.startsWith(constants_js_1.FileProtocol)
        ? true
        : (stdin.push(filename), false));
    const globResults = globPats.length ? await (0, glob_js_1.globP)(globPats, options) : [];
    const cwd = options.cwd || process.cwd();
    return [...stdin, ...globResults].map((filename) => resolveFilename(filename, cwd));
}
exports.findFiles = findFiles;
function calcFinalConfigInfo(configInfo, settingsFromCommandLine, filename, text) {
    const basename = path.basename(filename);
    const fileSettings = cspell.calcOverrideSettings(configInfo.config, path.resolve(filename));
    const loadDefault = settingsFromCommandLine.loadDefaultConfiguration ??
        configInfo.config.loadDefaultConfiguration ??
        fileSettings.loadDefaultConfiguration ??
        true;
    const settings = cspell.mergeSettings(cspell.getDefaultSettings(loadDefault), cspell.getGlobalSettings(), fileSettings, settingsFromCommandLine);
    const languageIds = settings.languageId
        ? Array.isArray(settings.languageId)
            ? settings.languageId
            : [settings.languageId]
        : cspell.getLanguageIdsForBaseFilename(basename);
    const config = cspell.constructSettingsForText(settings, text, languageIds);
    return {
        configInfo: { ...configInfo, config },
        filename,
        text,
        languageIds,
    };
}
exports.calcFinalConfigInfo = calcFinalConfigInfo;
const resolveFilenames = (0, async_js_1.asyncMap)(resolveFilename);
/**
 * Read
 * @param listFiles - array of file paths to read that will contain a list of files. Paths contained in each
 *   file will be resolved relative to the containing file.
 * @returns - a list of files to be processed.
 */
function readFileListFiles(listFiles) {
    let useStdin = false;
    const files = listFiles.filter((file) => {
        const isStdin = file === 'stdin';
        useStdin = useStdin || isStdin;
        return !isStdin;
    });
    const found = (0, async_js_1.asyncPipe)(files, (0, async_js_1.asyncMap)((file) => readFileListFile(file)), (0, async_js_1.asyncAwait)(), (0, async_js_1.asyncFlatten)());
    // Move `stdin` to the end.
    const stdin = useStdin ? (0, stdin_js_1.readStdin)() : [];
    return (0, async_js_1.asyncPipe)((0, async_js_1.mergeAsyncIterables)(found, stdin), resolveFilenames);
}
exports.readFileListFiles = readFileListFiles;
/**
 * Read a `listFile` and return the containing file paths resolved relative to the `listFile`.
 * @param listFiles - array of file paths to read that will contain a list of files. Paths contained in each
 *   file will be resolved relative to the containing file.
 * @returns - a list of files to be processed.
 */
async function readFileListFile(listFile) {
    try {
        const relTo = path.resolve(path.dirname(listFile));
        const content = await readFile(listFile);
        const lines = content
            .split('\n')
            .map((a) => a.trim())
            .filter((a) => !!a)
            .map((file) => path.resolve(relTo, file));
        return lines;
    }
    catch (err) {
        throw (0, errors_js_1.toApplicationError)(err, `Error reading file list from: "${listFile}"`);
    }
}
exports.readFileListFile = readFileListFile;
async function isFile(filename) {
    try {
        const stat = await fs_1.promises.stat(filename);
        return stat.isFile();
    }
    catch (e) {
        return false;
    }
}
exports.isFile = isFile;
async function isDir(filename) {
    try {
        const stat = await fs_1.promises.stat(filename);
        return stat.isDirectory();
    }
    catch (e) {
        return false;
    }
}
exports.isDir = isDir;
function isNotDir(filename) {
    return isDir(filename).then((a) => !a);
}
exports.isNotDir = isNotDir;
//# sourceMappingURL=fileHelper.js.map