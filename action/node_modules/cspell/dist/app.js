"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.CheckFailed = void 0;
const commander = __importStar(require("commander"));
const path = __importStar(require("path"));
const commandCheck_1 = require("./commandCheck");
const commandLink_1 = require("./commandLink");
const commandLint_1 = require("./commandLint");
const commandTrace_1 = require("./commandTrace");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const npmPackage = require(path.join(__dirname, '..', 'package.json'));
var errors_1 = require("./util/errors");
Object.defineProperty(exports, "CheckFailed", { enumerable: true, get: function () { return errors_1.CheckFailed; } });
async function run(program, argv) {
    const prog = program || commander.program;
    const args = argv || process.argv;
    prog.exitOverride();
    prog.version(npmPackage.version).description('Spelling Checker for Code').name('cspell');
    (0, commandLint_1.commandLint)(prog);
    (0, commandTrace_1.commandTrace)(prog);
    (0, commandCheck_1.commandCheck)(prog);
    (0, commandLink_1.commandLink)(prog);
    /*
        program
            .command('init')
            .description('(Alpha) Initialize a cspell.json file.')
            .option('-o, --output <cspell.json>', 'define where to write file.')
            .option('--extends <cspell.json>', 'extend an existing cspell.json file.')
            .action((options: InitOptions) => {
                showHelp = false;
                CSpellApplication.createInit(options).then(
                    () => process.exit(0),
                    () => process.exit(1)
                );
                console.log('Init');
            });
    */
    prog.exitOverride();
    await prog.parseAsync(args);
}
exports.run = run;
//# sourceMappingURL=app.js.map