"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.CheckFailed = void 0;
const path = __importStar(require("path"));
const commander = __importStar(require("commander"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const npmPackage = require(path.join(__dirname, '..', 'package.json'));
const application_1 = require("./application");
const App = __importStar(require("./application"));
const chalk = require("chalk");
const link_1 = require("./link");
const table_1 = require("./util/table");
const traceEmitter_1 = require("./traceEmitter");
const cli_reporter_1 = require("./cli-reporter");
const errors_1 = require("./util/errors");
const cache_1 = require("./util/cache");
var errors_2 = require("./util/errors");
Object.defineProperty(exports, "CheckFailed", { enumerable: true, get: function () { return errors_2.CheckFailed; } });
// interface InitOptions extends Options {}
async function run(program, argv) {
    const prog = program || commander.program;
    const args = argv || process.argv;
    prog.exitOverride();
    prog.version(npmPackage.version)
        .description('Spelling Checker for Code')
        .name('cspell')
        .option('--no-color', 'Turn off color.')
        .option('--color', 'Force color');
    const spellCheckCommand = prog.command('lint', { isDefault: true });
    spellCheckCommand
        .description('Check spelling')
        .option('-c, --config <cspell.json>', 'Configuration file to use.  By default cspell looks for cspell.json in the current directory.')
        .option('-v, --verbose', 'display more information about the files being checked and the configuration')
        .option('--locale <locale>', 'Set language locales. i.e. "en,fr" for English and French, or "en-GB" for British English.')
        .option('--language-id <language>', 'Force programming language for unknown extensions. i.e. "php" or "scala"')
        .option('--languageId <language>', 'Force programming language for unknown extensions. i.e. "php" or "scala"')
        .option('--wordsOnly', 'Only output the words not found in the dictionaries.')
        .option('-u, --unique', 'Only output the first instance of a word not found in the dictionaries.')
        .option('--debug', 'Output information useful for debugging cspell.json files.')
        .option('-e, --exclude <glob>', 'Exclude files matching the glob pattern. This option can be used multiple times to add multiple globs. ', collect)
        .option('--no-issues', 'Do not show the spelling errors.')
        .option('--no-progress', 'Turn off progress messages')
        .option('--no-summary', 'Turn off summary message in console')
        .option('-s, --silent', 'Silent mode, suppress error messages')
        .option('-r, --root <root folder>', 'Root directory, defaults to current directory.')
        .option('--relative', 'Issues are displayed relative to root.')
        .option('--show-context', 'Show the surrounding text around an issue.')
        .option('--show-suggestions', 'Show spelling suggestions.')
        .option('--must-find-files', 'Error if no files are found', true)
        .option('--no-must-find-files', 'Do not error if no files are found')
        // The following options are planned features
        // .option('-w, --watch', 'Watch for any changes to the matching files and report any errors')
        // .option('--force', 'Force the exit value to always be 0')
        .option('--legacy', 'Legacy output')
        .option('--local <local>', 'Deprecated -- Use: --locale')
        .option('--cache', 'Only check changed files', false)
        .addOption(new commander.Option('--cache-strategy <strategy>', 'Strategy to use for detecting changed files').choices([
        'metadata',
        'content',
    ]))
        .option('--cache-location <path>', `Path to the cache file or directory`, cache_1.DEFAULT_CACHE_LOCATION)
        .addHelpText('after', usage)
        .arguments('[files...]')
        .action((files, options) => {
        options.files = files;
        const { mustFindFiles } = options;
        const cliReporter = (0, cli_reporter_1.getReporter)(options);
        return App.lint(files, options, cliReporter).then((result) => {
            if (!files.length && !result.files) {
                spellCheckCommand.outputHelp();
                throw new errors_1.CheckFailed('outputHelp', 1);
            }
            if (result.issues || result.errors || (mustFindFiles && !result.files)) {
                throw new errors_1.CheckFailed('check failed', 1);
            }
            return;
        });
    });
    prog.command('trace')
        .description(`Trace words
  Search for words in the configuration and dictionaries.`)
        .option('-c, --config <cspell.json>', 'Configuration file to use.  By default cspell looks for cspell.json in the current directory.')
        .option('--locale <locale>', 'Set language locales. i.e. "en,fr" for English and French, or "en-GB" for British English.')
        .option('--languageId <language>', 'Force programming language for unknown extensions. i.e. "php" or "scala"')
        .option('--no-color', 'Turn off color.')
        .option('--color', 'Force color')
        .arguments('<words...>')
        .action(async (words, options) => {
        const results = await App.trace(words, options);
        (0, traceEmitter_1.emitTraceResults)(results, { cwd: process.cwd() });
        const numFound = results.reduce((n, r) => n + (r.found ? 1 : 0), 0);
        if (!numFound) {
            console.error('No matches found');
            throw new errors_1.CheckFailed('no matches', 1);
        }
        const numErrors = results.map((r) => { var _a; return ((_a = r.errors) === null || _a === void 0 ? void 0 : _a.length) || 0; }).reduce((n, r) => n + r, 0);
        if (numErrors) {
            console.error('Dictionary Errors.');
            throw new errors_1.CheckFailed('dictionary errors', 1);
        }
    });
    prog.command('check <files...>')
        .description('Spell check file(s) and display the result. The full file is displayed in color.')
        .option('-c, --config <cspell.json>', 'Configuration file to use.  By default cspell looks for cspell.json in the current directory.')
        .option('--no-color', 'Turn off color.')
        .option('--color', 'Force color')
        .action(async (files, options) => {
        let issueCount = 0;
        for (const filename of files) {
            console.log(chalk.yellowBright(`Check file: ${filename}`));
            console.log();
            try {
                const result = await (0, application_1.checkText)(filename, options);
                for (const item of result.items) {
                    const fn = item.flagIE === App.IncludeExcludeFlag.EXCLUDE
                        ? chalk.gray
                        : item.isError
                            ? chalk.red
                            : chalk.whiteBright;
                    const t = fn(item.text);
                    process.stdout.write(t);
                    issueCount += item.isError ? 1 : 0;
                }
                console.log();
            }
            catch (e) {
                console.error(`File not found "${filename}"`);
                throw new errors_1.CheckFailed('File not found', 1);
            }
            console.log();
        }
        if (issueCount) {
            throw new errors_1.CheckFailed('Issues found', 1);
        }
    });
    const linkCommand = prog
        .command('link')
        .description('Link dictionaries any other settings to the cspell global config.');
    linkCommand
        .command('list', { isDefault: true })
        .alias('ls')
        .description('List currently linked configurations.')
        .action(() => {
        const imports = (0, link_1.listGlobalImports)();
        const table = (0, link_1.listGlobalImportsResultToTable)(imports.list);
        (0, table_1.tableToLines)(table).forEach((line) => console.log(line));
        return;
    });
    linkCommand
        .command('add <dictionaries...>')
        .alias('a')
        .description('Add dictionaries any other settings to the cspell global config.')
        .action((dictionaries) => {
        const r = (0, link_1.addPathsToGlobalImports)(dictionaries);
        const table = (0, link_1.addPathsToGlobalImportsResultToTable)(r);
        console.log('Adding:');
        (0, table_1.tableToLines)(table).forEach((line) => console.log(line));
        if (r.error) {
            throw new errors_1.CheckFailed(r.error, 1);
        }
        return;
    });
    linkCommand
        .command('remove <paths...>')
        .alias('r')
        .description('Remove matching paths / packages from the global config.')
        .action((dictionaries) => {
        const r = (0, link_1.removePathsFromGlobalImports)(dictionaries);
        console.log('Removing:');
        if (r.error) {
            throw new errors_1.CheckFailed(r.error, 1);
        }
        r.removed.map((f) => console.log(f));
        return;
    });
    /*
        program
            .command('init')
            .description('(Alpha) Initialize a cspell.json file.')
            .option('-o, --output <cspell.json>', 'define where to write file.')
            .option('--extends <cspell.json>', 'extend an existing cspell.json file.')
            .action((options: InitOptions) => {
                showHelp = false;
                CSpellApplication.createInit(options).then(
                    () => process.exit(0),
                    () => process.exit(1)
                );
                console.log('Init');
            });
    */
    return prog.parseAsync(args).then(() => {
        return;
    });
}
exports.run = run;
const usage = `

Examples:
    cspell "*.js"                   Check all .js files in the current directory
    cspell "**/*.js"                Check all .js files from the current directory
    cspell "src/**/*.js"            Only check .js under src
    cspell "**/*.txt" "**/*.js"     Check both .js and .txt files.
    cspell "**/*.{txt,js,md}"       Check .txt, .js, and .md files.
    cat LICENSE | cspell stdin      Check stdin
`;
function collect(value, previous) {
    if (!previous) {
        return [value];
    }
    return previous.concat([value]);
}
//# sourceMappingURL=app.js.map