"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskCache = void 0;
const fileEntryCache = __importStar(require("file-entry-cache"));
const path_1 = require("path");
const fileHelper_1 = require("../../util/fileHelper");
/**
 * Caches cspell results on disk
 */
class DiskCache {
    constructor(cacheFileLocation, useCheckSum, version) {
        this.version = version;
        this.changedDependencies = new Set();
        this.knownDependencies = new Set();
        this.fileEntryCache = fileEntryCache.createFromFile((0, path_1.resolve)(cacheFileLocation), useCheckSum);
    }
    async getCachedLintResults(filename) {
        const fileDescriptor = this.fileEntryCache.getFileDescriptor(filename);
        const meta = fileDescriptor.meta;
        const data = meta === null || meta === void 0 ? void 0 : meta.data;
        const result = data === null || data === void 0 ? void 0 : data.r;
        const versionMatches = this.version === (data === null || data === void 0 ? void 0 : data.v);
        // Cached lint results are valid if and only if:
        // 1. The file is present in the filesystem
        // 2. The file has not changed since the time it was previously linted
        // 3. The CSpell configuration has not changed since the time the file was previously linted
        // If any of these are not true, we will not reuse the lint results.
        if (fileDescriptor.notFound ||
            fileDescriptor.changed ||
            !meta ||
            !result ||
            !versionMatches ||
            !this.checkDependencies(data.d)) {
            return undefined;
        }
        // Skip reading empty files and files without lint error
        const hasErrors = !!result && (result.errors > 0 || result.configErrors > 0 || result.issues.length > 0);
        const cached = true;
        const shouldReadFile = cached && hasErrors;
        return {
            ...result,
            elapsedTimeMs: undefined,
            fileInfo: shouldReadFile ? await (0, fileHelper_1.readFileInfo)(filename) : { filename },
            cached,
        };
    }
    setCachedLintResults({ fileInfo, elapsedTimeMs: _, ...result }, dependsUponFiles) {
        const fileDescriptor = this.fileEntryCache.getFileDescriptor(fileInfo.filename);
        const meta = fileDescriptor.meta;
        if (fileDescriptor.notFound || !meta) {
            return;
        }
        const data = {
            r: result,
            d: dependsUponFiles,
            v: this.version,
        };
        meta.data = data;
        this.cacheDependencies(dependsUponFiles);
    }
    reconcile() {
        this.fileEntryCache.reconcile();
    }
    cacheDependencies(files) {
        this.fileEntryCache.analyzeFiles(files);
    }
    checkDependencies(files) {
        for (const file of files) {
            if (this.changedDependencies.has(file)) {
                return false;
            }
        }
        const unknown = files.filter((f) => !this.knownDependencies.has(f));
        if (!unknown.length) {
            return true;
        }
        const { changedFiles, notFoundFiles } = this.fileEntryCache.analyzeFiles(files);
        changedFiles.map((f) => this.changedDependencies.add(f));
        unknown.forEach((f) => this.knownDependencies.add(f));
        return changedFiles.length === 0 && notFoundFiles.length === 0;
    }
}
exports.DiskCache = DiskCache;
//# sourceMappingURL=DiskCache.js.map