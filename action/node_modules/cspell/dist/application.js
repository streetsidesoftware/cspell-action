"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInit = exports.checkText = exports.trace = exports.lint = exports.IncludeExcludeFlag = void 0;
const cspell = __importStar(require("cspell-lib"));
const path = __importStar(require("path"));
const util = __importStar(require("./util/util"));
const cspell_lib_1 = require("cspell-lib");
var cspell_lib_2 = require("cspell-lib");
Object.defineProperty(exports, "IncludeExcludeFlag", { enumerable: true, get: function () { return cspell_lib_2.IncludeExcludeFlag; } });
const CSpellApplicationConfiguration_1 = require("./CSpellApplicationConfiguration");
const lint_1 = require("./lint");
const fileHelper_1 = require("./fileHelper");
function lint(files, options, emitters) {
    const cfg = new CSpellApplicationConfiguration_1.CSpellApplicationConfiguration(files, options, emitters);
    return lint_1.runLint(cfg);
}
exports.lint = lint;
async function trace(words, options) {
    const configFile = await fileHelper_1.readConfig(options.config, undefined);
    const config = cspell.mergeSettings(cspell.getDefaultSettings(), cspell.getGlobalSettings(), configFile.config);
    const results = await cspell_lib_1.traceWords(words, config);
    return results;
}
exports.trace = trace;
async function checkText(filename, options) {
    const pSettings = fileHelper_1.readConfig(options.config, path.dirname(filename));
    const [foundSettings, text] = await Promise.all([pSettings, fileHelper_1.readFile(filename)]);
    const settingsFromCommandLine = util.clean({
        languageId: options.languageId || undefined,
        language: options.locale || options.local || undefined,
    });
    const info = fileHelper_1.calcFinalConfigInfo(foundSettings, settingsFromCommandLine, filename, text);
    return cspell.checkText(text, info.configInfo.config);
}
exports.checkText = checkText;
function createInit() {
    return Promise.reject();
}
exports.createInit = createInit;
//# sourceMappingURL=application.js.map