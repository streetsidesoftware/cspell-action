"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultCSpellIO = exports.CSpellIONode = void 0;
const cspell_service_bus_1 = require("@cspell/cspell-service-bus");
const stat_js_1 = require("./common/stat.js");
const ErrorNotImplemented_js_1 = require("./errors/ErrorNotImplemented.js");
const file_js_1 = require("./handlers/node/file.js");
const util_js_1 = require("./node/file/util.js");
const index_js_1 = require("./requests/index.js");
let defaultCSpellIONode = undefined;
class CSpellIONode {
    constructor(serviceBus = new cspell_service_bus_1.ServiceBus()) {
        this.serviceBus = serviceBus;
        (0, file_js_1.registerHandlers)(serviceBus);
    }
    readFile(uriOrFilename, encoding = 'utf8') {
        const url = (0, util_js_1.toURL)(uriOrFilename);
        const res = this.serviceBus.dispatch(index_js_1.RequestFsReadFile.create({ url, encoding }));
        if (!(0, cspell_service_bus_1.isServiceResponseSuccess)(res)) {
            throw genError(res.error, 'readFile');
        }
        return res.value;
    }
    readFileSync(uriOrFilename, encoding = 'utf8') {
        const url = (0, util_js_1.toURL)(uriOrFilename);
        const res = this.serviceBus.dispatch(index_js_1.RequestFsReadFileSync.create({ url, encoding }));
        if (!(0, cspell_service_bus_1.isServiceResponseSuccess)(res)) {
            throw genError(res.error, 'readFileSync');
        }
        return res.value;
    }
    writeFile(uriOrFilename, content) {
        const url = (0, util_js_1.toURL)(uriOrFilename);
        const res = this.serviceBus.dispatch(index_js_1.RequestFsWriteFile.create({ url, content }));
        if (!(0, cspell_service_bus_1.isServiceResponseSuccess)(res)) {
            throw genError(res.error, 'writeFile');
        }
        return res.value;
    }
    getStat(uriOrFilename) {
        const url = (0, util_js_1.toURL)(uriOrFilename);
        const res = this.serviceBus.dispatch(index_js_1.RequestFsStat.create({ url }));
        if (!(0, cspell_service_bus_1.isServiceResponseSuccess)(res)) {
            throw genError(res.error, 'getStat');
        }
        return res.value;
    }
    getStatSync(uriOrFilename) {
        const url = (0, util_js_1.toURL)(uriOrFilename);
        const res = this.serviceBus.dispatch(index_js_1.RequestFsStatSync.create({ url }));
        if (!(0, cspell_service_bus_1.isServiceResponseSuccess)(res)) {
            throw genError(res.error, 'getStatSync');
        }
        return res.value;
    }
    compareStats(left, right) {
        return (0, stat_js_1.compareStats)(left, right);
    }
    toURL(uriOrFilename) {
        return (0, util_js_1.toURL)(uriOrFilename);
    }
    uriBasename(uriOrFilename) {
        return (0, util_js_1.urlBasename)(uriOrFilename);
    }
    uriDirname(uriOrFilename) {
        return (0, util_js_1.urlDirname)(uriOrFilename);
    }
}
exports.CSpellIONode = CSpellIONode;
function genError(err, alt) {
    return err || new ErrorNotImplemented_js_1.ErrorNotImplemented(alt);
}
function getDefaultCSpellIO() {
    if (defaultCSpellIONode)
        return defaultCSpellIONode;
    const cspellIO = new CSpellIONode();
    defaultCSpellIONode = cspellIO;
    return cspellIO;
}
exports.getDefaultCSpellIO = getDefaultCSpellIO;
//# sourceMappingURL=CSpellIONode.js.map