"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathToTemp = exports.testNameToDir = exports.makePathToFile = exports.pathToRoot = exports.pathToSample = void 0;
const promises_1 = require("fs/promises");
const path = __importStar(require("path"));
const vitest_1 = require("vitest");
const mkdirp = async (p) => {
    await (0, promises_1.mkdir)(p, { recursive: true });
};
const pathPackageRoot = path.join(__dirname, '../..');
const pathSamples = path.join(pathPackageRoot, 'samples');
const pathTemp = path.join(pathPackageRoot, 'temp');
function pathToSample(...parts) {
    return path.resolve(pathSamples, ...parts);
}
exports.pathToSample = pathToSample;
function pathToRoot(...parts) {
    return path.resolve(pathPackageRoot, ...parts);
}
exports.pathToRoot = pathToRoot;
function makePathToFile(file) {
    return mkdirp(path.dirname(file));
}
exports.makePathToFile = makePathToFile;
function testNameToDir(testName) {
    return `test_${testName.replace(/\s/g, '-').replace(/[^\w.-]/gi, '_')}_test`;
}
exports.testNameToDir = testNameToDir;
/**
 * Calculate a Uri for a path to a temporary directory that will be unique to the current test.
 * Note: if a text is not currently running, then it is the path for the test file.
 * @param baseFilename - name of file / directory wanted
 * @param testFilename - optional full path to a test file.
 * @returns full path to the requested temp file.
 */
function pathToTemp(...parts) {
    const testState = vitest_1.expect.getState();
    const callerFile = testState.testPath || '.';
    const testFile = path.relative(pathPackageRoot, callerFile);
    vitest_1.expect.getState();
    const testName = testState.currentTestName || '.';
    const testDirName = testNameToDir(testName);
    return path.resolve(pathTemp, testFile, testDirName, ...parts);
}
exports.pathToTemp = pathToTemp;
//# sourceMappingURL=test.helper.js.map