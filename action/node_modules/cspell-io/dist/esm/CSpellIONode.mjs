import { isServiceResponseSuccess, ServiceBus } from '@cspell/cspell-service-bus';
import { compareStats } from './common/stat.mjs';
import { ErrorNotImplemented } from './errors/ErrorNotImplemented.mjs';
import { registerHandlers } from './handlers/node/file.mjs';
import { toURL, urlBasename, urlDirname } from './node/file/util.mjs';
import { RequestFsReadFile, RequestFsReadFileSync, RequestFsStat, RequestFsStatSync, RequestFsWriteFile, } from './requests/index.mjs';
let defaultCSpellIONode = undefined;
export class CSpellIONode {
    constructor(serviceBus = new ServiceBus()) {
        this.serviceBus = serviceBus;
        registerHandlers(serviceBus);
    }
    readFile(uriOrFilename, encoding = 'utf8') {
        const url = toURL(uriOrFilename);
        const res = this.serviceBus.dispatch(RequestFsReadFile.create({ url, encoding }));
        if (!isServiceResponseSuccess(res)) {
            throw genError(res.error, 'readFile');
        }
        return res.value;
    }
    readFileSync(uriOrFilename, encoding = 'utf8') {
        const url = toURL(uriOrFilename);
        const res = this.serviceBus.dispatch(RequestFsReadFileSync.create({ url, encoding }));
        if (!isServiceResponseSuccess(res)) {
            throw genError(res.error, 'readFileSync');
        }
        return res.value;
    }
    writeFile(uriOrFilename, content) {
        const url = toURL(uriOrFilename);
        const res = this.serviceBus.dispatch(RequestFsWriteFile.create({ url, content }));
        if (!isServiceResponseSuccess(res)) {
            throw genError(res.error, 'writeFile');
        }
        return res.value;
    }
    getStat(uriOrFilename) {
        const url = toURL(uriOrFilename);
        const res = this.serviceBus.dispatch(RequestFsStat.create({ url }));
        if (!isServiceResponseSuccess(res)) {
            throw genError(res.error, 'getStat');
        }
        return res.value;
    }
    getStatSync(uriOrFilename) {
        const url = toURL(uriOrFilename);
        const res = this.serviceBus.dispatch(RequestFsStatSync.create({ url }));
        if (!isServiceResponseSuccess(res)) {
            throw genError(res.error, 'getStatSync');
        }
        return res.value;
    }
    compareStats(left, right) {
        return compareStats(left, right);
    }
    toURL(uriOrFilename) {
        return toURL(uriOrFilename);
    }
    uriBasename(uriOrFilename) {
        return urlBasename(uriOrFilename);
    }
    uriDirname(uriOrFilename) {
        return urlDirname(uriOrFilename);
    }
}
function genError(err, alt) {
    return err || new ErrorNotImplemented(alt);
}
export function getDefaultCSpellIO() {
    if (defaultCSpellIONode)
        return defaultCSpellIONode;
    const cspellIO = new CSpellIONode();
    defaultCSpellIONode = cspellIO;
    return cspellIO;
}
