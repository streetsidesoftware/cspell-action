/// <reference types="node" />
/**
 * Generates a string of the following format:
 *
 * `data:[mediaType][;charset=<encoding>[;base64],<data>`
 *
 * - `encoding` - defaults to `utf8` for text data
 * @param data
 * @param mediaType - The mediaType is a [MIME](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) type string
 * @param attributes - Additional attributes
 */
export declare function encodeDataUrl(data: string | Buffer, mediaType: string, attributes?: Iterable<readonly [string, string]> | undefined): string;
export declare function toDataUrl(data: string | Buffer, mediaType: string, attributes?: Iterable<[string, string]> | undefined): URL;
export interface DecodedDataUrl {
    data: Buffer;
    mediaType: string;
    encoding?: string | undefined;
    attributes: Map<string, string>;
}
export declare function decodeDataUrl(url: string | URL): DecodedDataUrl;
export declare function encodeDataUrlFromFile(path: string | URL, mediaType?: string, attributes?: Iterable<readonly [string, string]> | undefined): Promise<string>;
export interface GuessMimeTypeResult {
    mimeType: string;
    encoding?: 'utf-8' | undefined;
}
export declare function guessMimeType(filename: string): GuessMimeTypeResult | undefined;
//# sourceMappingURL=dataUrl.d.mts.map