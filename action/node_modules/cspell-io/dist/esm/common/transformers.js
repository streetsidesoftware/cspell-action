import { calcEncodingFromBom, decode, decodeUtf16BE, decodeUtf16LE, encodeString } from './encode-decode.js';
export function createDecoderTransformer(encoding) {
    function standardDecoder(buf) {
        return decode(buf, encoding);
    }
    let decoder = undefined;
    if (encoding && !encoding.startsWith('utf'))
        return decoderNonUtf;
    return decoderUtf;
    async function* decoderNonUtf(iterable) {
        for await (const buf of iterable) {
            yield typeof buf === 'string' ? buf : decode(buf, encoding);
        }
    }
    async function* decoderUtf(iterable) {
        for await (const sb of iterable) {
            if (typeof sb === 'string') {
                yield sb;
                continue;
            }
            if (sb.length < 2) {
                yield standardDecoder(sb);
                continue;
            }
            if (decoder) {
                yield decoder(sb);
                continue;
            }
            decoder = standardDecoder;
            const _encoding = calcEncodingFromBom(sb);
            if (_encoding === 'utf16le') {
                decoder = decodeUtf16LE;
                yield decoder(sb.subarray(2));
                continue;
            }
            if (_encoding === 'utf16be') {
                decoder = decodeUtf16BE;
                yield decoder(sb.subarray(2));
                continue;
            }
            yield decoder(sb);
        }
    }
}
export function encoderTransformer(iterable, encoding) {
    return isAsyncIterable(iterable) ? encoderAsyncIterable(iterable, encoding) : encoderIterable(iterable, encoding);
}
function* encoderIterable(iterable, encoding) {
    let useBom = true;
    for (const chunk of iterable) {
        yield encodeString(chunk, encoding, useBom);
        useBom = false;
    }
}
async function* encoderAsyncIterable(iterable, encoding) {
    let useBom = true;
    for await (const chunk of iterable) {
        yield encodeString(chunk, encoding, useBom);
        useBom = false;
    }
}
function isAsyncIterable(v) {
    return v && typeof v === 'object' && !!v[Symbol.asyncIterator];
}
