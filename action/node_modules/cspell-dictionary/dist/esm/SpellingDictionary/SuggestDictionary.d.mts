import type { IgnoreCaseOption, PreferredSuggestion, SpellingDictionary } from './SpellingDictionary.mjs';
import { type TypoEntry, type TyposDef } from './Typos/index.mjs';
export interface SuggestDictionary extends SpellingDictionary {
    getPreferredSuggestions: (word: string) => PreferredSuggestion[];
    /**
     * Determine if the word can appear in a list of suggestions.
     * @param word - word
     * @param ignoreCaseAndAccents - ignore case.
     * @returns true if a word is suggested, otherwise false.
     */
    isSuggestedWord(word: string, ignoreCaseAndAccents?: IgnoreCaseOption): boolean;
}
/**
 * Create a dictionary where all words are to be forbidden.
 * @param entries - list of Typos Entries
 * @param name - name of dictionary
 * @param source - source
 * @returns
 */
export declare function createSuggestDictionary(entries: readonly string[] | TyposDef | Iterable<TypoEntry>, name: string, source: string): SuggestDictionary;
//# sourceMappingURL=SuggestDictionary.d.mts.map