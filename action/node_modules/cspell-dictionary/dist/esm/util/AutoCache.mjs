const CACHE_SIZE = 100;
class Cache01 {
    constructor(maxSize) {
        this.maxSize = maxSize;
        this.count = 0;
        this.cache0 = Object.create(null);
        this.cache1 = Object.create(null);
        this.hits = 0;
        this.misses = 0;
        this.swaps = 0;
    }
    get(key) {
        const cache0 = this.cache0;
        const cache1 = this.cache1;
        if (key in cache0) {
            ++this.hits;
            return cache0[key];
        }
        if (key in cache1) {
            ++this.hits;
            ++this.count;
            const r = cache1[key];
            cache0[key] = r;
            return r;
        }
        ++this.misses;
        return undefined;
    }
    set(key, value) {
        if (this.count >= this.maxSize) {
            this.cache1 = this.cache0;
            this.cache0 = Object.create(null);
            this.swaps++;
            this.count = 0;
        }
        ++this.count;
        this.cache0[key] = value;
        return this;
    }
}
export function createCache01(size) {
    return new Cache01(size);
}
export function autoCache(fn, size = CACHE_SIZE) {
    const cache = createCache01(size);
    const ac = get;
    ac.hits = 0;
    ac.misses = 0;
    ac.swaps = 0;
    function get(k) {
        const f = cache.get(k);
        if (f !== undefined) {
            ++ac.hits;
            return f;
        }
        const r = fn(k);
        cache.set(k, r);
        ac.swaps = cache.swaps;
        ++ac.misses;
        return r;
    }
    return ac;
}
export function extractStats(ac) {
    const { hits, misses, swaps } = ac;
    return { hits, misses, swaps };
}
