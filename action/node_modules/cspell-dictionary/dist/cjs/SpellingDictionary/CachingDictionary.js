"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCachingDictionary = void 0;
const AutoCache_js_1 = require("../util/AutoCache.js");
const SpellingDictionaryMethods_js_1 = require("./SpellingDictionaryMethods.js");
let dictionaryCounter = 0;
const DefaultAutoCacheSize = 1000;
class CachedDict {
    constructor(dict, options) {
        this.dict = dict;
        this.options = options;
        this.id = ++dictionaryCounter;
        this.has = (0, AutoCache_js_1.autoCache)((word) => this.dict.has(word, this.options), DefaultAutoCacheSize);
        this.isNoSuggestWord = (0, AutoCache_js_1.autoCache)((word) => this.dict.isNoSuggestWord(word, this.options), DefaultAutoCacheSize);
        this.isForbidden = (0, AutoCache_js_1.autoCache)((word) => this.dict.isForbidden(word), DefaultAutoCacheSize);
        this.getPreferredSuggestions = (0, AutoCache_js_1.autoCache)((word) => this.dict.getPreferredSuggestions?.(word), DefaultAutoCacheSize);
        this.name = dict.name;
        // console.log(`CachedDict for ${this.name}`);
    }
    stats() {
        return {
            name: this.name,
            id: this.id,
            has: (0, AutoCache_js_1.extractStats)(this.has),
            isNoSuggestWord: (0, AutoCache_js_1.extractStats)(this.isNoSuggestWord),
            isForbidden: (0, AutoCache_js_1.extractStats)(this.isForbidden),
            getPreferredSuggestions: (0, AutoCache_js_1.extractStats)(this.getPreferredSuggestions),
        };
    }
}
const knownDicts = new Map();
/**
 * create a caching dictionary
 * @param dict - Dictionary to cache the search results.
 * @param options - Search options to use.
 * @returns CachingDictionary
 */
function createCachingDictionary(dict, options) {
    options = (0, SpellingDictionaryMethods_js_1.canonicalSearchOptions)(options);
    let knownOptions = knownDicts.get(options);
    if (!knownOptions) {
        knownOptions = new WeakMap();
        knownDicts.set(options, knownOptions);
    }
    const known = knownOptions.get(dict);
    if (known)
        return known;
    const cached = new CachedDict(dict, options);
    knownOptions.set(dict, cached);
    return cached;
}
exports.createCachingDictionary = createCachingDictionary;
//# sourceMappingURL=CachingDictionary.js.map