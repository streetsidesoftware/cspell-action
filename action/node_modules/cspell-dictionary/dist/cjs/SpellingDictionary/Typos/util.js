"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractIgnoreValues = exports.extractAllSuggestions = exports.createTyposDef = exports.appendToDef = exports.mergeDef = exports.mergeDefEntry = void 0;
const sync_1 = require("@cspell/cspell-pipe/sync");
function normalizeTyposDefValue(value) {
    if (!value)
        return false;
    if (typeof value === 'string')
        return value;
    const unique = [...new Set(value)];
    return unique.length > 1 ? unique : unique.length === 1 ? unique[0] : false;
}
function mergeDefEntry(targetDef, key, value) {
    const curValue = targetDef[key];
    if (!curValue) {
        targetDef[key] = normalizeTyposDefValue(value);
        return targetDef;
    }
    if (!value)
        return targetDef;
    const newValue = Array.isArray(curValue) ? curValue : [curValue];
    if (Array.isArray(value)) {
        newValue.push(...value);
    }
    else {
        newValue.push(value);
    }
    targetDef[key] = normalizeTyposDefValue(newValue);
    return targetDef;
}
exports.mergeDefEntry = mergeDefEntry;
/**
 * Merge in place the entries `fromDef` into `targetDef`
 * @param targetDef - the target
 * @param fromDef - the source
 * @returns the target
 */
function mergeDef(targetDef, fromDef) {
    for (const key of Object.keys(fromDef)) {
        mergeDefEntry(targetDef, key, fromDef[key]);
    }
    return targetDef;
}
exports.mergeDef = mergeDef;
/**
 * Append an entry to a TyposDef.
 * @param def - modified in place
 * @param entry- entry to add.
 * @returns def
 */
function appendToDef(def, entry) {
    if (!entry)
        return def;
    if (typeof entry === 'string') {
        if (!def[entry]) {
            def[entry] = false;
        }
        return def;
    }
    if (Array.isArray(entry)) {
        const [key, ...sugs] = entry.map((s) => s.trim());
        if (!key)
            return def;
        const s = sugs.map((s) => s.trim()).filter((s) => !!s);
        return mergeDefEntry(def, key, s);
    }
    return mergeDef(def, entry);
}
exports.appendToDef = appendToDef;
function createTyposDef(entries) {
    const def = Object.create(null);
    if (!entries)
        return def;
    for (const [key, value] of entries) {
        def[key] = isDefined(value) ? value : false;
    }
    return def;
}
exports.createTyposDef = createTyposDef;
/**
 * Extract all suggestions.
 * @param typosDef - the def
 * @returns the set of suggestions.
 */
function extractAllSuggestions(typosDef) {
    const allSugs = (0, sync_1.pipe)(Object.values(typosDef), (0, sync_1.opFilter)(hasSuggestions), (0, sync_1.opConcatMap)((v) => (Array.isArray(v) ? v : [v])));
    return new Set(allSugs);
}
exports.extractAllSuggestions = extractAllSuggestions;
/**
 * Extract all words that have been explicitly ignore because they contains the `ignorePrefix`.
 * @param typosDef - the def
 * @param ignorePrefix - prefix
 * @returns set of ignored words with the prefix removed.
 */
function extractIgnoreValues(typosDef, ignorePrefix) {
    const pfxLen = ignorePrefix.length;
    return new Set(Object.keys(typosDef)
        .filter((k) => k.startsWith(ignorePrefix))
        .map((k) => k.slice(pfxLen)));
}
exports.extractIgnoreValues = extractIgnoreValues;
function isDefined(v) {
    return v !== undefined && v !== null;
}
function isString(v) {
    return typeof v === 'string';
}
function isArray(v) {
    return Array.isArray(v);
}
function hasSuggestions(v) {
    return isString(v) || isArray(v);
}
//# sourceMappingURL=util.js.map