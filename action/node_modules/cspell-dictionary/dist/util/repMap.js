"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__testing__ = exports.createMapper = void 0;
const regexHelper_1 = require("./regexHelper");
function createMapper(repMap, ignoreCharset) {
    if (!repMap && !ignoreCharset)
        return (a) => a;
    repMap = repMap || [];
    const charsetMap = charsetToRepMap(ignoreCharset);
    if (charsetMap) {
        repMap = repMap.concat(charsetMap);
    }
    const filteredMap = repMap.filter(([match, _]) => !!match);
    if (!filteredMap.length) {
        return (a) => a;
    }
    const regEx = createMapperRegExp(repMap);
    const values = repMap.filter(([match, _]) => !!match).map(([_, into]) => into);
    function resolve(m, ...matches) {
        const index = matches.findIndex((a) => !!a);
        return 0 <= index && index < values.length ? values[index] : m;
    }
    return function (s) {
        return s.replace(regEx, resolve);
    };
}
exports.createMapper = createMapper;
function charsetToRepMap(charset, replaceWith = '') {
    if (!charset)
        return undefined;
    return charset
        .split('|')
        .map((chars) => `[${chars.replace(/[\][\\]/g, '\\$&')}]`)
        .map((map) => [map, replaceWith]);
}
function createMapperRegExp(repMap) {
    const filteredMap = repMap.filter(([match, _]) => !!match);
    if (!filteredMap.length) {
        return /$^/;
    }
    const regExStr = filteredMap
        .map(([from, _]) => from)
        // make sure it compiles into a regex
        .map((s) => {
        try {
            // fix up any nested ()
            const r = s.match(/\(/) ? s.replace(/\((?=.*\))/g, '(?:').replace(/\(\?:\?/g, '(?') : s;
            new RegExp(r);
            s = r;
        }
        catch (err) {
            return (0, regexHelper_1.escapeRegEx)(s);
        }
        return s;
    })
        .map((s) => `(${s})`)
        .join('|');
    const regEx = new RegExp(regExStr, 'g');
    return regEx;
}
exports.__testing__ = {
    charsetToRepMap,
    createMapperRegExp,
};
//# sourceMappingURL=repMap.js.map