"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDefined = exports.DefaultPathHelper = exports.normalizePath = exports.makeRelativeTo = exports.contains = exports.isParentOf = exports.findRepoRoot = exports.directoryRoot = exports.factoryPathHelper = void 0;
const find_up_1 = __importDefault(require("find-up"));
const path = __importStar(require("path"));
function factoryPathHelper(path) {
    function directoryRoot(directory) {
        const p = path.parse(directory);
        return p.root;
    }
    async function findRepoRoot(directory) {
        const found = await (0, find_up_1.default)('.git', { cwd: directory, type: 'directory' });
        if (!found)
            return undefined;
        return path.dirname(found);
    }
    function isParentOf(parent, child) {
        const rel = path.relative(parent, child);
        return !!rel && !path.isAbsolute(rel) && rel[0] !== '.';
    }
    function contains(parent, child) {
        const rel = path.relative(parent, child);
        return !rel || (!path.isAbsolute(rel) && rel[0] !== '.');
    }
    function makeRelativeTo(child, parent) {
        const rel = path.relative(parent, child);
        if (path.isAbsolute(rel) || rel[0] === '.')
            return undefined;
        return normalizePath(rel);
    }
    function normalizePath(path) {
        return path.replace(/\\/g, '/');
    }
    return {
        directoryRoot,
        findRepoRoot,
        isParentOf,
        contains,
        normalizePath,
        makeRelativeTo,
    };
}
exports.factoryPathHelper = factoryPathHelper;
const defaultHelper = factoryPathHelper(path);
/**
 * Parse a directory and return its root
 * @param directory - directory to parse.
 * @returns root directory
 */
exports.directoryRoot = defaultHelper.directoryRoot;
/**
 * Find the git repository root directory.
 * @param directory - directory to search up from.
 * @returns resolves to `.git` root or undefined
 */
exports.findRepoRoot = defaultHelper.findRepoRoot;
/**
 * Checks to see if the child directory is nested under the parent directory.
 * @param parent - parent directory
 * @param child - possible child directory
 * @returns true iff child is a child of parent.
 */
exports.isParentOf = defaultHelper.isParentOf;
/**
 * Check to see if a parent directory contains a child directory.
 * @param parent - parent directory
 * @param child - child directory
 * @returns true iff child is the same as the parent or nested in the parent.
 */
exports.contains = defaultHelper.contains;
/**
 * Make a path relative to another if the other is a parent.
 * @param path - the path to make relative
 * @param rootPath - a root of path
 * @returns the normalized relative path or undefined if rootPath is not a parent.
 */
exports.makeRelativeTo = defaultHelper.makeRelativeTo;
/**
 * Normalize a path to have only forward slashes.
 * @param path - path to normalize
 * @returns a normalized string.
 */
exports.normalizePath = defaultHelper.normalizePath;
exports.DefaultPathHelper = {
    directoryRoot: exports.directoryRoot,
    findRepoRoot: exports.findRepoRoot,
    isParentOf: exports.isParentOf,
    contains: exports.contains,
    makeRelativeTo: exports.makeRelativeTo,
    normalizePath: exports.normalizePath,
};
function isDefined(v) {
    return v !== undefined && v !== null;
}
exports.isDefined = isDefined;
//# sourceMappingURL=helpers.js.map