import type { Dispatcher } from './Dispatcher.mjs';
import type { Handler, HandleRequestFn } from './handlers.mjs';
import type { ServiceRequest } from './request.mjs';
import type { ServiceRequestFactory } from './ServiceRequestFactory.mjs';
export interface SystemServiceBus extends Dispatcher {
    registerHandler(requestPrefix: string, handler: Handler): this;
    registerRequestHandler<T extends ServiceRequest>(requestDef: ServiceRequestFactory<T>, fn: HandleRequestFn<T>, name?: string | undefined, description?: string | undefined): this;
    createSubsystem(name: string, requestPattern: string | RegExp): SubsystemServiceBus;
    readonly subsystems: Map<string, SubsystemServiceBus>;
}
export declare function createSystemServiceBus(): SystemServiceBus;
export declare const RequestRegisterHandlerFactory: ServiceRequestFactory<ServiceRequest<"System:RegisterHandler", {
    readonly requestPrefix: string;
    readonly handler: Handler;
}, SubsystemServiceBus>, {
    readonly requestPrefix: string;
    readonly handler: Handler;
}, "System:RegisterHandler">;
export declare const RequestCreateSubsystemFactory: ServiceRequestFactory<ServiceRequest<"System:CreateSubsystem", {
    readonly name: string;
    readonly requestPattern: string | RegExp;
}, SubsystemServiceBus>, {
    readonly name: string;
    readonly requestPattern: string | RegExp;
}, "System:CreateSubsystem">;
interface SubsystemServiceBus extends Dispatcher {
    readonly name: string;
    readonly requestPattern: string | RegExp;
    readonly handler: Handler;
}
export declare function createSubsystemServiceBus(name: string, requestPattern: string | RegExp): SubsystemServiceBus;
export {};
//# sourceMappingURL=SystemServiceBus.d.mts.map