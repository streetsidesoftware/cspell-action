import type { Dispatcher } from './Dispatcher.mjs';
import type { Handler, HandleRequest, HandlerFn } from './handlers.mjs';
import type { RequestResponseType, ServiceRequest } from './request.mjs';
export declare class ServiceBus implements Dispatcher {
    readonly handlers: Handler[];
    constructor(handlers?: Handler[]);
    addHandler(handler: HandlerFn, name: string, description?: string): this;
    addHandler(handler: Handler): this;
    dispatch<R extends ServiceRequest>(request: R): RequestResponseType<R>;
    defaultHandler<T extends ServiceRequest>(request: T): import("./request.js").ServiceResponseFailure<RequestResponseType<T> extends infer T_1 ? T_1 extends RequestResponseType<T> ? T_1 extends {
        ___T?: infer R;
    } ? R : never : never : never>;
    protected reduceHandlers<R extends ServiceRequest>(handlers: readonly Handler[], request: R, dispatcher: Dispatcher, defaultHandler: HandleRequest): HandleRequest;
}
export declare function createServiceBus(handlers?: Handler[]): ServiceBus;
//# sourceMappingURL=bus.d.mts.map