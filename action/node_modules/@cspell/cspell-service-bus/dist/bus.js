"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnhandledHandlerError = exports.ErrorServiceRequestDepthExceeded = exports.ErrorUnhandledRequest = exports.createRequestHandler = exports.createIsRequestHandler = exports.createIsRequestHandlerFn = exports.createServiceBus = exports.ServiceBus = void 0;
const request_1 = require("./request");
const MAX_DEPTH = 10;
class ServiceBus {
    constructor(handlers = []) {
        this.handlers = [];
        handlers.forEach((h) => this.addHandler(h));
    }
    addHandler(handler, name = 'anonymous', description) {
        const h = typeof handler === 'function' ? { fn: handler, name, description } : handler;
        const { fn, name: _name, description: _description } = h;
        this.handlers.push({ fn, name: _name, description: _description });
    }
    dispatch(request) {
        let depth = 0;
        const dispatcher = { dispatch };
        const handler = this.reduceHandlers(this.handlers, request, dispatcher, this.defaultHandler);
        function dispatch(request) {
            ++depth;
            if (depth >= MAX_DEPTH) {
                return (0, request_1.createResponseFail)(request, new ErrorServiceRequestDepthExceeded(request, depth));
            }
            const response = handler(request);
            --depth;
            return response;
        }
        return dispatch(request);
    }
    defaultHandler(request) {
        return (0, request_1.createResponseFail)(request, new ErrorUnhandledRequest(request));
    }
    reduceHandlers(handlers, request, dispatcher, defaultHandler) {
        const _handlers = handlers.map((m) => ({ ...m, fn: m.fn(dispatcher) }));
        const handler = _handlers.reduce((next, h) => {
            const fn = h.fn(next);
            return (req) => {
                try {
                    return fn(req);
                }
                catch (e) {
                    return (0, request_1.createResponseFail)(request, new UnhandledHandlerError(h.name, h.description, e));
                }
            };
        }, defaultHandler);
        return handler;
    }
}
exports.ServiceBus = ServiceBus;
function createServiceBus(handlers = []) {
    return new ServiceBus(handlers);
}
exports.createServiceBus = createServiceBus;
function createIsRequestHandlerFn(isA, fn) {
    return (dispatcher) => (next) => (request) => isA(request) ? fn(request, next, dispatcher) : next(request);
}
exports.createIsRequestHandlerFn = createIsRequestHandlerFn;
function createIsRequestHandler(isA, fn, name, description) {
    return {
        fn: createIsRequestHandlerFn(isA, fn),
        name,
        description,
    };
}
exports.createIsRequestHandler = createIsRequestHandler;
function createRequestHandler(requestDef, fn, name, description) {
    return createIsRequestHandler(requestDef.is, fn, name ?? requestDef.type, description);
}
exports.createRequestHandler = createRequestHandler;
class ErrorUnhandledRequest extends Error {
    constructor(request) {
        super(`Unhandled Request: ${request.type}`);
        this.request = request;
    }
}
exports.ErrorUnhandledRequest = ErrorUnhandledRequest;
class ErrorServiceRequestDepthExceeded extends Error {
    constructor(request, depth) {
        super(`Service Request Depth ${depth} Exceeded: ${request.type}`);
        this.request = request;
        this.depth = depth;
    }
}
exports.ErrorServiceRequestDepthExceeded = ErrorServiceRequestDepthExceeded;
class UnhandledHandlerError extends Error {
    constructor(handlerName, handlerDescription, cause) {
        super(`Unhandled Error in Handler: ${handlerName}`);
        this.handlerName = handlerName;
        this.handlerDescription = handlerDescription;
        this.cause = cause;
    }
}
exports.UnhandledHandlerError = UnhandledHandlerError;
//# sourceMappingURL=bus.js.map