'use strict';

class ErrorUnhandledRequest extends Error {
    constructor(request) {
        super(`Unhandled Request: ${request.type}`);
        this.request = request;
    }
}
class ErrorServiceRequestDepthExceeded extends Error {
    constructor(request, depth) {
        super(`Service Request Depth ${depth} Exceeded: ${request.type}`);
        this.request = request;
        this.depth = depth;
    }
}
class UnhandledHandlerError extends Error {
    constructor(handlerName, handlerDescription, cause) {
        super(`Unhandled Error in Handler: ${handlerName}`);
        this.handlerName = handlerName;
        this.handlerDescription = handlerDescription;
        this.cause = cause;
    }
}

class BaseServiceRequest {
    constructor(type, params) {
        this.type = type;
        this.params = params;
    }
}
class ServiceRequestCls extends BaseServiceRequest {
    constructor(type, params) {
        super(type, params);
    }
}
function createResponse(value, _req) {
    return { value };
}
function createResponseFail(_request, error) {
    return { error };
}
function isServiceResponseSuccess(res) {
    return 'value' in res && res.error === undefined;
}
function isServiceResponseFailure(res) {
    return res.error !== undefined;
}

const MAX_DEPTH = 10;
class ServiceBus {
    constructor(handlers = []) {
        this.handlers = [];
        handlers.forEach((h) => this.addHandler(h));
    }
    addHandler(handler, name = 'anonymous', description) {
        const h = typeof handler === 'function' ? { fn: handler, name, description } : handler;
        const { fn, name: _name, description: _description } = h;
        this.handlers.push({ fn, name: _name, description: _description });
        return this;
    }
    dispatch(request) {
        let depth = 0;
        const dispatcher = { dispatch };
        const handler = this.reduceHandlers(this.handlers, request, dispatcher, this.defaultHandler);
        function dispatch(request) {
            ++depth;
            if (depth >= MAX_DEPTH) {
                return createResponseFail(request, new ErrorServiceRequestDepthExceeded(request, depth));
            }
            const response = handler(request);
            --depth;
            return response;
        }
        return dispatch(request);
    }
    defaultHandler(request) {
        return createResponseFail(request, new ErrorUnhandledRequest(request));
    }
    reduceHandlers(handlers, request, dispatcher, defaultHandler) {
        const _handlers = handlers.map((m) => ({ ...m, fn: m.fn(dispatcher) }));
        const handler = _handlers.reduce((next, h) => {
            const fn = h.fn(next);
            return (req) => {
                try {
                    return fn(req);
                }
                catch (e) {
                    return createResponseFail(request, new UnhandledHandlerError(h.name, h.description, e));
                }
            };
        }, defaultHandler);
        return handler;
    }
}
function createServiceBus(handlers = []) {
    return new ServiceBus(handlers);
}

function createRequestHandler(requestDef, fn, name, description) {
    return createIsRequestHandler(requestDef.is, fn, name ?? requestDef.type, description);
}
function createIsRequestHandlerFn(isA, fn) {
    return (dispatcher) => (next) => (request) => isA(request) ? fn(request, next, dispatcher) : next(request);
}
function createIsRequestHandler(isA, fn, name, description) {
    return {
        fn: createIsRequestHandlerFn(isA, fn),
        name,
        description,
    };
}

function requestFactory(requestType) {
    class RequestClass extends ServiceRequestCls {
        constructor(params) {
            super(requestType, params);
        }
        static is(req) {
            return req instanceof RequestClass && req.type === requestType;
        }
        static create(params) {
            return new RequestClass(params);
        }
        static createRequestHandler(fn, name, description) {
            return createRequestHandler(RequestClass, fn, name, description);
        }
    }
    RequestClass.type = requestType;
    return RequestClass;
}

exports.ServiceBus = ServiceBus;
exports.ServiceRequestCls = ServiceRequestCls;
exports.createIsRequestHandler = createIsRequestHandler;
exports.createRequestHandler = createRequestHandler;
exports.createResponse = createResponse;
exports.createResponseFail = createResponseFail;
exports.createServiceBus = createServiceBus;
exports.isServiceResponseFailure = isServiceResponseFailure;
exports.isServiceResponseSuccess = isServiceResponseSuccess;
exports.requestFactory = requestFactory;
//# sourceMappingURL=index.cjs.map
