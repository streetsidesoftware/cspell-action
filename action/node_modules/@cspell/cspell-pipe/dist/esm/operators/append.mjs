import { isAsyncIterable } from '../helpers/index.mjs';
/**
 * Append values onto the end of an iterable.
 * @param iterablesToAppend - the iterables in the order to be appended.
 * @returns
 */
export function opAppendAsync(...iterablesToAppend) {
    async function* fn(iter) {
        yield* iter;
        for (const i of iterablesToAppend) {
            yield* i;
        }
    }
    return fn;
}
/**
 * Append values onto the end of an iterable.
 * @param iterablesToAppend - the iterables in the order to be appended.
 * @returns
 */
export function opAppendSync(...iterablesToAppend) {
    function* fn(iter) {
        yield* iter;
        for (const i of iterablesToAppend) {
            yield* i;
        }
    }
    return fn;
}
export function opAppend(...iterablesToAppend) {
    function _(i) {
        return isAsyncIterable(i) ? opAppendAsync(...iterablesToAppend)(i) : opAppendSync(...iterablesToAppend)(i);
    }
    return _;
}
