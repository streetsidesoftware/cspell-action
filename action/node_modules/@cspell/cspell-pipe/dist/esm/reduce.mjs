import { isAsyncIterable } from './helpers/index.mjs';
import { toArrayAsync } from './helpers/toArray.mjs';
import { opReduceAsync, opReduceSync } from './operators/index.mjs';
import { pipeAsync, pipeSync } from './pipe.mjs';
export function reduceSync(iter, reduceFn, initialValue) {
    const i = initialValue === undefined
        ? pipeSync(iter, opReduceSync(reduceFn))
        : pipeSync(iter, opReduceSync(reduceFn, initialValue));
    return [...i][0];
}
export async function reduceAsync(iter, reduceFn, initialValue) {
    const i = initialValue === undefined
        ? pipeAsync(iter, opReduceAsync(reduceFn))
        : pipeAsync(iter, opReduceAsync(reduceFn, initialValue));
    const arr = await toArrayAsync(i);
    return arr[0];
}
export function reduce(iter, reduceFn, initialValue) {
    return isAsyncIterable(iter) ? reduceAsync(iter, reduceFn, initialValue) : reduceSync(iter, reduceFn, initialValue);
}
