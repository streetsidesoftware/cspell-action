'use strict';

function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

const symNotFound = Symbol('LastNotFound');
// prettier-ignore
function opLastAsync(lastFn) {
    async function* fn(iter) {
        let last = symNotFound;
        for await (const v of iter) {
            const pass = await lastFn(v);
            if (pass) {
                last = v;
            }
        }
        if (last !== symNotFound)
            yield last;
    }
    return fn;
}
function opLastSync(lastFn) {
    function* fn(iter) {
        let last = symNotFound;
        for (const v of iter) {
            if (lastFn(v)) {
                last = v;
            }
        }
        if (last !== symNotFound)
            yield last;
    }
    return fn;
}
function opLast(fn) {
    const asyncFn = opLastAsync(fn);
    const syncFn = opLastSync(fn);
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}

exports.opLast = opLast;
exports.opLastAsync = opLastAsync;
exports.opLastSync = opLastSync;
