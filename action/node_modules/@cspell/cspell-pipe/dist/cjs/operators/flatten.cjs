'use strict';

function toPipeFn(syncFn, asyncFn) {
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}
function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

function opFlattenAsync() {
    async function* fn(iter) {
        for await (const v of iter) {
            yield* v;
        }
    }
    return fn;
}
function opFlattenSync() {
    function* fn(iter) {
        for (const v of iter) {
            yield* v;
        }
    }
    return fn;
}
const opFlatten = () => toPipeFn(opFlattenSync(), opFlattenAsync());

exports.opFlatten = opFlatten;
exports.opFlattenAsync = opFlattenAsync;
exports.opFlattenSync = opFlattenSync;
