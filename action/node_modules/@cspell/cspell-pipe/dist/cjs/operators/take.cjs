'use strict';

function toPipeFn(syncFn, asyncFn) {
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}
function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

function opTakeAsync(count) {
    async function* fn(iter) {
        if (count <= 0)
            return;
        for await (const v of iter) {
            yield v;
            if (--count <= 0)
                return;
        }
    }
    return fn;
}
function opTakeSync(count) {
    function* fn(iter) {
        if (count <= 0)
            return;
        for (const v of iter) {
            yield v;
            if (--count <= 0)
                return;
        }
    }
    return fn;
}
/**
 * Consume only the first `count` number from the iterable.
 * @param count - number to take
 */
const opTake = (count) => toPipeFn(opTakeSync(count), opTakeAsync(count));

exports.opTake = opTake;
exports.opTakeAsync = opTakeAsync;
exports.opTakeSync = opTakeSync;
