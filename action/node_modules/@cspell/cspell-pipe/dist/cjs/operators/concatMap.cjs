'use strict';

function toPipeFn(syncFn, asyncFn) {
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}
function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

function opConcatMapAsync(mapFn) {
    async function* fn(iter) {
        for await (const v of iter) {
            yield* mapFn(v);
        }
    }
    return fn;
}
function opConcatMapSync(mapFn) {
    function* fn(iter) {
        for (const v of iter) {
            yield* mapFn(v);
        }
    }
    return fn;
}
const opConcatMap = (fn) => toPipeFn(opConcatMapSync(fn), opConcatMapAsync(fn));

exports.opConcatMap = opConcatMap;
exports.opConcatMapAsync = opConcatMapAsync;
exports.opConcatMapSync = opConcatMapSync;
