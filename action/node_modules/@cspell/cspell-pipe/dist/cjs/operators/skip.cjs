'use strict';

function toPipeFn(syncFn, asyncFn) {
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}
function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

function opSkipAsync(count) {
    async function* fn(iter) {
        for await (const v of iter) {
            if (count > 0) {
                --count;
                continue;
            }
            yield v;
        }
    }
    return fn;
}
function opSkipSync(count) {
    function* fn(iter) {
        for (const v of iter) {
            if (count > 0) {
                --count;
                continue;
            }
            yield v;
        }
    }
    return fn;
}
const opSkip = (count) => toPipeFn(opSkipSync(count), opSkipAsync(count));

exports.opSkip = opSkip;
exports.opSkipAsync = opSkipAsync;
exports.opSkipSync = opSkipSync;
