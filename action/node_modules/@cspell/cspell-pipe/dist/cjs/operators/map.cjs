'use strict';

function toPipeFn(syncFn, asyncFn) {
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}
function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

function opMapAsync(mapFn) {
    async function* fn(iter) {
        for await (const v of iter) {
            yield mapFn(v);
        }
    }
    return fn;
}
function opMapSync(mapFn) {
    function* fn(iter) {
        for (const v of iter) {
            yield mapFn(v);
        }
    }
    return fn;
}
const opMap = (fn) => toPipeFn(opMapSync(fn), opMapAsync(fn));

exports.opMap = opMap;
exports.opMapAsync = opMapAsync;
exports.opMapSync = opMapSync;
