'use strict';

function toPipeFn(syncFn, asyncFn) {
    function _(i) {
        return isAsyncIterable(i) ? asyncFn(i) : syncFn(i);
    }
    return _;
}
function isAsyncIterable(i) {
    return typeof i[Symbol.asyncIterator] === 'function';
}

/**
 * Tap allows you to listen on values, without modifying them.
 *
 * @param fn - function to call for each value.
 */
function opTapAsync(tapFn) {
    async function* fn(iter) {
        for await (const v of iter) {
            tapFn(v);
            yield v;
        }
    }
    return fn;
}
/**
 * Tap allows you to listen on values, without modifying them.
 *
 * @param fn - function to call for each value.
 */
function opTapSync(tapFn) {
    function* fn(iter) {
        for (const v of iter) {
            tapFn(v);
            yield v;
        }
    }
    return fn;
}
/**
 * Tap allows you to listen on values, without modifying them.
 *
 * @param fn - function to call for each value.
 */
const opTap = (fn) => toPipeFn(opTapSync(fn), opTapAsync(fn));

exports.opTap = opTap;
exports.opTapAsync = opTapAsync;
exports.opTapSync = opTapSync;
