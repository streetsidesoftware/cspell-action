"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReporter = void 0;
const cspell_types_1 = require("@cspell/cspell-types");
const fs_1 = require("fs");
const path = __importStar(require("path"));
const setToJSONReplacer_js_1 = require("./utils/setToJSONReplacer.js");
const validateSettings_js_1 = require("./utils/validateSettings.js");
function mkdirp(p) {
    return fs_1.promises.mkdir(p, { recursive: true });
}
const noopReporter = () => undefined;
const STDOUT = 'stdout';
const STDERR = 'stderr';
function getReporter(settings, cliOptions) {
    const useSettings = normalizeSettings(settings);
    const reportData = { issues: [], info: [], debug: [], error: [], progress: [] };
    return {
        issue: (issue) => {
            reportData.issues.push(issue);
        },
        info: (message, msgType) => {
            if (msgType === cspell_types_1.MessageTypes.Debug && !useSettings.debug) {
                return;
            }
            if (msgType === cspell_types_1.MessageTypes.Info && !useSettings.verbose) {
                return;
            }
            reportData.info = push(reportData.info, { message, msgType });
        },
        debug: useSettings.debug
            ? (message) => {
                reportData.debug = push(reportData.debug, { message });
            }
            : noopReporter,
        error: (message, error) => {
            reportData.error = push(reportData.error, { message, error });
        },
        progress: useSettings.progress
            ? (item) => {
                reportData.progress = push(reportData.progress, item);
            }
            : noopReporter,
        result: async (result) => {
            const outFile = useSettings.outFile || STDOUT;
            const output = {
                ...reportData,
                result,
            };
            const jsonData = JSON.stringify(output, setToJSONReplacer_js_1.setToJSONReplacer, 4);
            if (outFile === STDOUT) {
                console.log(jsonData);
                return;
            }
            if (outFile === STDERR) {
                console.error(jsonData);
                return;
            }
            const outFilePath = path.join(cliOptions?.root ?? process.cwd(), outFile);
            await mkdirp(path.dirname(outFilePath));
            return fs_1.promises.writeFile(outFilePath, jsonData);
        },
    };
}
exports.getReporter = getReporter;
function normalizeSettings(settings) {
    if (settings === undefined)
        return { outFile: STDOUT };
    (0, validateSettings_js_1.validateSettings)(settings);
    return settings;
}
function push(src, value) {
    if (src) {
        src.push(value);
        return src;
    }
    return [value];
}
//# sourceMappingURL=index.js.map