"use strict";
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigstoreLocation = exports.clearMocks = exports.mockClearData = exports.clearData = exports.mockAll = exports.mockSetData = exports.setData = void 0;
const data = {};
function setData(keyValue, value) {
    if (typeof keyValue == 'string') {
        data[keyValue] = value;
        return;
    }
    Object.assign(data, keyValue);
}
exports.setData = setData;
exports.mockSetData = jest.fn(setData);
exports.mockAll = jest.fn(() => data);
function clearData() {
    for (const key of Object.keys(data)) {
        delete data[key];
    }
}
exports.clearData = clearData;
exports.mockClearData = jest.fn(clearData);
function clearMocks() {
    exports.mockAll.mockClear();
    exports.mockSetData.mockClear();
    exports.mockClearData.mockClear();
    clearData();
}
exports.clearMocks = clearMocks;
function getConfigstoreLocation(id) {
    id = id || 'cspell';
    return `/User/local/data/.config/configstore/${id}.json`;
}
exports.getConfigstoreLocation = getConfigstoreLocation;
const mock = jest.fn().mockImplementation((id) => {
    const r = {
        path: getConfigstoreLocation(id),
        set: exports.mockSetData,
        size: 0,
        clear: exports.mockClearData,
    };
    Object.defineProperty(r, 'all', {
        get: exports.mockAll,
        set: (v) => {
            clearData();
            setData(v);
        },
    });
    return r;
});
exports.default = mock;
//# sourceMappingURL=configstore.js.map