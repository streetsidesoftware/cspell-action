import { SuggestionCollector, SuggestionResult, CompoundWordsMethod } from 'cspell-trie-lib';
import { FunctionArgs } from '../util/types';
import { SpellingDictionary, HasOptions, SearchOptions } from './SpellingDictionary';
export { CompoundWordsMethod, JOIN_SEPARATOR, SuggestionCollector, suggestionCollector, SuggestionResult, WORD_SEPARATOR, } from 'cspell-trie-lib';
export declare type FilterSuggestionsPredicate = (word: SuggestionResult) => boolean;
export declare const PREFIX_NO_CASE = ">";
export declare const regexPrefix: RegExp;
export declare type SuggestArgs = FunctionArgs<SpellingDictionary['suggest']> | FunctionArgs<(word: string, numSuggestions?: number, compoundMethod?: CompoundWordsMethod, numChanges?: number) => SuggestionResult[]>;
export declare const defaultNumSuggestions = 10;
export declare function impersonateCollector(collector: SuggestionCollector, word: string): SuggestionCollector;
export declare function wordSearchForms(word: string, isDictionaryCaseSensitive: boolean, ignoreCase: boolean): string[];
interface DictionaryWordForm {
    w: string;
    p: string;
}
declare function wordDictionaryForms(word: string, isDictionaryCaseSensitive: boolean): IterableIterator<DictionaryWordForm>;
export declare function wordDictionaryFormsCollector(isDictionaryCaseSensitive: boolean): (word: string) => Iterable<string>;
export declare function hasOptionToSearchOption(opt: HasOptions | undefined): SearchOptions;
export declare const __testMethods: {
    wordSearchForms: typeof wordSearchForms;
    wordDictionaryForms: typeof wordDictionaryForms;
    wordDictionaryFormsCollector: typeof wordDictionaryFormsCollector;
};
