import { Trie, SuggestionCollector, SuggestionResult, CompoundWordsMethod } from 'cspell-trie-lib';
import { SpellingDictionary, HasOptions, SuggestOptions, SpellingDictionaryOptions } from './SpellingDictionary';
export declare class SpellingDictionaryFromTrie implements SpellingDictionary {
    readonly trie: Trie;
    readonly name: string;
    readonly options: SpellingDictionaryOptions;
    readonly source: string;
    static readonly cachedWordsLimit = 50000;
    private _size;
    readonly knownWords: Set<string>;
    readonly unknownWords: Set<string>;
    readonly mapWord: (word: string) => string;
    readonly type = "SpellingDictionaryFromTrie";
    readonly isDictionaryCaseSensitive: boolean;
    constructor(trie: Trie, name: string, options?: SpellingDictionaryOptions, source?: string, size?: number);
    get size(): number;
    has(word: string, hasOptions?: HasOptions): boolean;
    private _has;
    private hasAnyForm;
    suggest(word: string, numSuggestions?: number, compoundMethod?: CompoundWordsMethod, numChanges?: number): SuggestionResult[];
    suggest(word: string, suggestOptions: SuggestOptions): SuggestionResult[];
    private _suggest;
    genSuggestions(collector: SuggestionCollector, suggestOptions: SuggestOptions): void;
}
export declare function createSpellingDictionaryTrie(data: Iterable<string>, name: string, source: string, options?: SpellingDictionaryOptions): Promise<SpellingDictionary>;
