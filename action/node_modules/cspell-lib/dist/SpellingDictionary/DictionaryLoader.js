"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testing = exports.refreshCacheEntries = exports.loadDictionary = void 0;
const fs_extra_1 = require("fs-extra");
const path = __importStar(require("path"));
const fileReader_1 = require("../util/fileReader");
const createSpellingDictionary_1 = require("./createSpellingDictionary");
const SpellingDictionaryError_1 = require("./SpellingDictionaryError");
const SpellingDictionaryFromTrie_1 = require("./SpellingDictionaryFromTrie");
const gensequence_1 = require("gensequence");
const MAX_AGE = 10000;
const loaders = {
    S: loadSimpleWordList,
    C: legacyWordList,
    W: wordsPerLineWordList,
    T: loadTrie,
    default: loadSimpleWordList,
};
const dictionaryCache = new Map();
function loadDictionary(uri, options) {
    const key = calcKey(uri, options);
    const entry = dictionaryCache.get(key);
    if (entry) {
        return entry.dictionary;
    }
    const loadedEntry = loadEntry(uri, options);
    dictionaryCache.set(key, loadedEntry);
    return loadedEntry.dictionary;
}
exports.loadDictionary = loadDictionary;
const importantOptionKeys = ['noSuggest', 'useCompounds'];
function calcKey(uri, options) {
    const loaderType = determineType(uri, options);
    const optValues = importantOptionKeys.map((k) => { var _a; return ((_a = options[k]) === null || _a === void 0 ? void 0 : _a.toString()) || ''; });
    const parts = [uri, loaderType].concat(optValues);
    return parts.join('|');
}
/**
 * Check to see if any of the cached dictionaries have changed. If one has changed, reload it.
 * @param maxAge - Only check the dictionary if it has been at least `maxAge` ms since the last check.
 * @param now - optional timestamp representing now. (Mostly used in testing)
 */
async function refreshCacheEntries(maxAge = MAX_AGE, now = Date.now()) {
    await Promise.all([...dictionaryCache].map(([, entry]) => refreshEntry(entry, maxAge, now)));
}
exports.refreshCacheEntries = refreshCacheEntries;
async function refreshEntry(entry, maxAge, now) {
    if (now - entry.ts >= maxAge) {
        // Write to the ts, so the next one will not do it.
        entry.ts = now;
        const pStat = (0, fs_extra_1.stat)(entry.uri).catch((e) => e);
        const [state, oldState] = await Promise.all([pStat, entry.state]);
        if (entry.ts === now && !isEqual(state, oldState)) {
            dictionaryCache.set(calcKey(entry.uri, entry.options), loadEntry(entry.uri, entry.options));
        }
    }
}
function isEqual(a, b) {
    if (isError(a)) {
        return isError(b) && a.message === b.message && a.name === b.name;
    }
    return !isError(b) && (a.mtimeMs === b.mtimeMs || a.size === b.size);
}
function isError(e) {
    const err = e;
    return !!(err.name && err.message);
}
function loadEntry(uri, options, now = Date.now()) {
    const dictionary = load(uri, options).catch((e) => (0, createSpellingDictionary_1.createFailedToLoadDictionary)(new SpellingDictionaryError_1.SpellingDictionaryLoadError(uri, options, e, 'failed to load')));
    return {
        uri,
        options,
        ts: now,
        state: (0, fs_extra_1.stat)(uri).catch((e) => e),
        dictionary,
    };
}
function determineType(uri, opts) {
    const t = (opts.type && opts.type in loaders && opts.type) || 'S';
    const defLoaderType = t;
    const defType = uri.endsWith('.trie.gz') ? 'T' : uri.endsWith('.txt.gz') ? defLoaderType : defLoaderType;
    const regTrieTest = /\.trie\b/i;
    return regTrieTest.test(uri) ? 'T' : defType;
}
function load(uri, options) {
    const type = determineType(uri, options);
    const loader = loaders[type] || loaders.default;
    return loader(uri, options);
}
async function legacyWordList(filename, options) {
    const lines = await (0, fileReader_1.readLines)(filename);
    const words = (0, gensequence_1.genSequence)(lines)
        // Remove comments
        .map((line) => line.replace(/#.*/g, ''))
        // Split on everything else
        .concatMap((line) => line.split(/[^\w\p{L}\p{M}'â€™]+/gu))
        .filter((word) => !!word);
    return (0, createSpellingDictionary_1.createSpellingDictionary)(words, determineName(filename, options), filename, options);
}
async function wordsPerLineWordList(filename, options) {
    const lines = await (0, fileReader_1.readLines)(filename);
    const words = (0, gensequence_1.genSequence)(lines)
        // Remove comments
        .map((line) => line.replace(/#.*/g, ''))
        // Split on everything else
        .concatMap((line) => line.split(/\s+/gu))
        .filter((word) => !!word);
    return (0, createSpellingDictionary_1.createSpellingDictionary)(words, determineName(filename, options), filename, options);
}
async function loadSimpleWordList(filename, options) {
    const lines = await (0, fileReader_1.readLines)(filename);
    return (0, createSpellingDictionary_1.createSpellingDictionary)(lines, determineName(filename, options), filename, options);
}
async function loadTrie(filename, options) {
    const lines = await (0, fileReader_1.readLines)(filename);
    return (0, SpellingDictionaryFromTrie_1.createSpellingDictionaryTrie)(lines, determineName(filename, options), filename, options);
}
function determineName(filename, options) {
    return options.name || path.basename(filename);
}
exports.testing = {
    dictionaryCache,
    refreshEntry,
    loadEntry,
    load,
};
//# sourceMappingURL=DictionaryLoader.js.map