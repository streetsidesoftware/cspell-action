"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.__testing__ = exports.getDefaultConfigLoader = exports.createConfigLoader = exports.clearCachedSettingsFiles = exports.getCachedFileSize = exports.getGlobalSettings = exports.readRawSettings = exports.loadPnPSync = exports.loadPnP = exports.loadConfigSync = exports.loadConfig = exports.searchForConfigSync = exports.searchForConfig = exports.ConfigLoader = exports.defaultConfigFilenames = exports.defaultFileName = exports.sectionCSpell = void 0;
const json = __importStar(require("comment-json"));
const cosmiconfig_1 = require("cosmiconfig");
const cspell_io_1 = require("cspell-io");
const path = __importStar(require("path"));
const CSpellSettingsInternalDef_js_1 = require("../../../Models/CSpellSettingsInternalDef.js");
const AutoResolveLRUCache_js_1 = require("../../../util/AutoResolveLRUCache.js");
const logger_js_1 = require("../../../util/logger.js");
const resolveFile_js_1 = require("../../../util/resolveFile.js");
const Uri_js_1 = require("../../../util/Uri.js");
const constants_js_1 = require("../../constants.js");
const CSpellSettingsServer_js_1 = require("../../CSpellSettingsServer.js");
const GlobalSettings_js_1 = require("../../GlobalSettings.js");
const ImportError_js_1 = require("../ImportError.js");
const pnpLoader_js_1 = require("../pnpLoader.js");
const defaultSettings_js_1 = require("./defaultSettings.js");
const normalizeRawSettings_js_1 = require("./normalizeRawSettings.js");
const PnPSettings_js_1 = require("./PnPSettings.js");
const supportedCSpellConfigVersions = [constants_js_1.configSettingsFileVersion0_2];
const setOfSupportedConfigVersions = Object.freeze(new Set(supportedCSpellConfigVersions));
exports.sectionCSpell = 'cSpell';
exports.defaultFileName = 'cspell.json';
const gcl = getDefaultConfigLoaderInternal;
const CACHE_SIZE_SEARCH_CONFIG = 32;
/**
 * Logic of the locations:
 * - Support backward compatibility with the VS Code Spell Checker
 *   the spell checker extension can only write to `.json` files because
 *   it would be too difficult to automatically modify a `.js` or `.cjs` file.
 * - To support `cspell.config.js` in a VS Code environment, have a `cspell.json` import
 *   the `cspell.config.js`.
 */
const searchPlaces = Object.freeze([
    'package.json',
    // Original locations
    '.cspell.json',
    'cspell.json',
    '.cSpell.json',
    'cSpell.json',
    // Original locations jsonc
    '.cspell.jsonc',
    'cspell.jsonc',
    // Alternate locations
    '.vscode/cspell.json',
    '.vscode/cSpell.json',
    '.vscode/.cspell.json',
    // Standard Locations
    'cspell.config.json',
    'cspell.config.jsonc',
    'cspell.config.yaml',
    'cspell.config.yml',
    'cspell.yaml',
    'cspell.yml',
    // Dynamic config is looked for last
    'cspell.config.js',
    'cspell.config.cjs',
    // .config
    '.config/.cspell.json',
    '.config/cspell.json',
    '.config/.cSpell.json',
    '.config/cSpell.json',
    '.config/.cspell.jsonc',
    '.config/cspell.jsonc',
    '.config/cspell.config.json',
    '.config/cspell.config.jsonc',
    '.config/cspell.config.yaml',
    '.config/cspell.config.yml',
    '.config/cspell.yaml',
    '.config/cspell.yml',
    '.config/cspell.config.js',
    '.config/cspell.config.cjs',
]);
const cspellCosmiconfig = {
    searchPlaces: searchPlaces.concat(),
    loaders: {
        '.json': parseJson,
        '.jsonc': parseJson,
    },
};
function parseJson(_filename, content) {
    return json.parse(content);
}
exports.defaultConfigFilenames = Object.freeze(searchPlaces.concat());
let defaultConfigLoader = undefined;
class ConfigLoader {
    /**
     * Use `createConfigLoader`
     * @param cspellIO - CSpellIO interface for reading files.
     */
    constructor(cspellIO) {
        this.cspellIO = cspellIO;
        this.cachedFiles = new Map();
        this.cspellConfigExplorer = (0, cosmiconfig_1.cosmiconfig)('cspell', cspellCosmiconfig);
        this.cspellConfigExplorerSync = (0, cosmiconfig_1.cosmiconfigSync)('cspell', cspellCosmiconfig);
        this.searchConfigLRU = new AutoResolveLRUCache_js_1.AutoResolveLRUCache(CACHE_SIZE_SEARCH_CONFIG, (a, b) => a.searchFrom === b.searchFrom && a.pnpSettings === b.pnpSettings);
    }
    readSettings(filename, relativeToOrDefault, defaultValue) {
        // console.log('Read Settings: %o', { filename, relativeToOrDefault });
        const relativeTo = (typeof relativeToOrDefault === 'string' ? relativeToOrDefault : '') || process.cwd();
        defaultValue = defaultValue || (typeof relativeToOrDefault !== 'string' ? relativeToOrDefault : undefined);
        const ref = resolveFilename(filename, relativeTo);
        return this.importSettings(ref, defaultValue, defaultValue || PnPSettings_js_1.defaultPnPSettings);
    }
    async readSettingsAsync(filename, relativeTo, pnpSettings) {
        const ref = resolveFilename(filename, relativeTo || process.cwd());
        return this.importSettings(ref, undefined, pnpSettings || PnPSettings_js_1.defaultPnPSettings);
    }
    /**
     *
     * @param searchFrom the directory / file to start searching from.
     * @param pnpSettings - related to Using Yarn PNP.
     * @returns the resulting settings
     */
    searchForConfig(searchFrom, pnpSettings = PnPSettings_js_1.defaultPnPSettings) {
        pnpSettings = (0, PnPSettings_js_1.normalizePnPSettings)(pnpSettings);
        return this.searchConfigLRU.get({ searchFrom, pnpSettings }, (p) => this._searchForConfig(p));
    }
    _searchForConfig(params) {
        // console.log('_searchForConfig: %o', { params, stats: this.searchConfigLRU.stats() });
        return gcl()
            .normalizeSearchForConfigResultAsync(params.searchFrom || process.cwd(), this.cspellConfigExplorer.search(params.searchFrom), params.pnpSettings)
            .then((r) => (r.filepath ? r.config : undefined));
    }
    getGlobalSettings() {
        if (!this.globalSettings) {
            const globalConf = (0, GlobalSettings_js_1.getRawGlobalSettings)();
            this.globalSettings = {
                id: 'global_config',
                ...this.normalizeSettings(globalConf || {}, './global_config', {}),
            };
        }
        return this.globalSettings;
    }
    clearCachedSettingsFiles() {
        this.searchConfigLRU.clear();
        this.globalSettings = undefined;
        this.cachedFiles.clear();
        this.cspellConfigExplorer.clearCaches();
        this.cspellConfigExplorerSync.clearCaches();
    }
    /**
     * Read a config file and inject the fileRef.
     * @param fileRef - filename plus context, injected into the resulting config.
     */
    readConfig(fileRef) {
        // cspellConfigExplorerSync
        const { filename, error } = fileRef;
        if (error) {
            fileRef.error =
                error instanceof ImportError_js_1.ImportError
                    ? error
                    : new ImportError_js_1.ImportError(`Failed to read config file: "${filename}"`, error);
            return { __importRef: fileRef };
        }
        const s = {};
        try {
            const r = this.cspellConfigExplorerSync.load(filename);
            if (!r?.config)
                throw new Error(`not found: "${filename}"`);
            Object.assign(s, r.config);
            (0, normalizeRawSettings_js_1.normalizeRawConfig)(s);
            validateRawConfig(s, fileRef);
        }
        catch (err) {
            fileRef.error =
                err instanceof ImportError_js_1.ImportError ? err : new ImportError_js_1.ImportError(`Failed to read config file: "${filename}"`, err);
        }
        s.__importRef = fileRef;
        return s;
    }
    importSettings(fileRef, defaultValues, pnpSettings) {
        defaultValues = defaultValues ?? defaultSettings_js_1.defaultSettings;
        const { filename } = fileRef;
        const importRef = { ...fileRef };
        const cached = this.cachedFiles.get(filename);
        if (cached) {
            const cachedImportRef = cached.__importRef || importRef;
            cachedImportRef.referencedBy = mergeSourceList(cachedImportRef.referencedBy || [], importRef.referencedBy);
            cached.__importRef = cachedImportRef;
            return cached;
        }
        const id = [path.basename(path.dirname(filename)), path.basename(filename)].join('/');
        const name = '';
        const finalizeSettings = (0, CSpellSettingsInternalDef_js_1.createCSpellSettingsInternal)({ id, name, __importRef: importRef });
        this.cachedFiles.set(filename, finalizeSettings); // add an empty entry to prevent circular references.
        const settings = { ...defaultValues, id, name, ...this.readConfig(importRef) };
        Object.assign(finalizeSettings, this.normalizeSettings(settings, filename, pnpSettings));
        const finalizeSrc = { name: path.basename(filename), ...finalizeSettings.source };
        finalizeSettings.source = { ...finalizeSrc, filename };
        this.cachedFiles.set(filename, finalizeSettings);
        return finalizeSettings;
    }
    /**
     * normalizeSettings handles correcting all relative paths, anchoring globs, and importing other config files.
     * @param rawSettings - raw configuration settings
     * @param pathToSettingsFile - path to the source file of the configuration settings.
     */
    normalizeSettings(rawSettings, pathToSettingsFile, pnpSettings) {
        const id = rawSettings.id ||
            [path.basename(path.dirname(pathToSettingsFile)), path.basename(pathToSettingsFile)].join('/');
        const name = rawSettings.name || id;
        // Try to load any .pnp files before reading dictionaries or other config files.
        const { usePnP = pnpSettings.usePnP, pnpFiles = pnpSettings.pnpFiles } = rawSettings;
        const pnpSettingsToUse = (0, PnPSettings_js_1.normalizePnPSettings)({ usePnP, pnpFiles });
        const pathToSettingsDir = path.dirname(pathToSettingsFile);
        loadPnPSync(pnpSettingsToUse, (0, Uri_js_1.toUri)(pathToSettingsDir));
        // Fix up dictionaryDefinitions
        const settings = {
            version: defaultSettings_js_1.defaultSettings.version,
            ...rawSettings,
            id,
            name,
            globRoot: resolveGlobRoot(rawSettings, pathToSettingsFile),
            languageSettings: (0, normalizeRawSettings_js_1.normalizeLanguageSettings)(rawSettings.languageSettings),
        };
        const pathToSettings = path.dirname(pathToSettingsFile);
        const normalizedDictionaryDefs = (0, normalizeRawSettings_js_1.normalizeDictionaryDefs)(settings, pathToSettingsFile);
        const normalizedSettingsGlobs = (0, normalizeRawSettings_js_1.normalizeSettingsGlobs)(settings, pathToSettingsFile);
        const normalizedOverrides = (0, normalizeRawSettings_js_1.normalizeOverrides)(settings, pathToSettingsFile);
        const normalizedReporters = (0, normalizeRawSettings_js_1.normalizeReporters)(settings, pathToSettingsFile);
        const normalizedGitignoreRoot = (0, normalizeRawSettings_js_1.normalizeGitignoreRoot)(settings, pathToSettingsFile);
        const normalizedCacheSettings = (0, normalizeRawSettings_js_1.normalizeCacheSettings)(settings, pathToSettingsDir);
        const imports = typeof settings.import === 'string' ? [settings.import] : settings.import || [];
        const source = settings.source || {
            name: settings.name,
            filename: pathToSettingsFile,
        };
        const fileSettings = (0, CSpellSettingsInternalDef_js_1.createCSpellSettingsInternal)({
            ...settings,
            source,
            ...normalizedDictionaryDefs,
            ...normalizedSettingsGlobs,
            ...normalizedOverrides,
            ...normalizedReporters,
            ...normalizedGitignoreRoot,
            ...normalizedCacheSettings,
        });
        if (!imports.length) {
            return fileSettings;
        }
        const importedSettings = imports
            .map((name) => resolveFilename(name, pathToSettings))
            .map((ref) => ((ref.referencedBy = [source]), ref))
            .map((ref) => this.importSettings(ref, undefined, pnpSettingsToUse))
            .reduce((a, b) => (0, CSpellSettingsServer_js_1.mergeSettings)(a, b));
        const finalizeSettings = (0, CSpellSettingsServer_js_1.mergeSettings)(importedSettings, fileSettings);
        finalizeSettings.name = settings.name || finalizeSettings.name || '';
        finalizeSettings.id = settings.id || finalizeSettings.id || '';
        return finalizeSettings;
    }
}
exports.ConfigLoader = ConfigLoader;
class ConfigLoaderInternal extends ConfigLoader {
    constructor(cspellIO) {
        super(cspellIO);
        this._readConfig = this.readConfig.bind(this);
        this._normalizeSettings = this.normalizeSettings.bind(this);
    }
    get _cachedFiles() {
        return this.cachedFiles;
    }
    get _cspellConfigExplorer() {
        return this.cspellConfigExplorer;
    }
    get _cspellConfigExplorerSync() {
        return this.cspellConfigExplorerSync;
    }
    async normalizeSearchForConfigResultAsync(searchPath, searchResult, pnpSettings) {
        let result;
        try {
            result = (await searchResult) || undefined;
        }
        catch (cause) {
            result = new ImportError_js_1.ImportError(`Failed to find config file at: "${searchPath}"`, cause);
        }
        return this.normalizeSearchForConfigResult(searchPath, result, pnpSettings);
    }
    normalizeSearchForConfigResult(searchPath, searchResult, pnpSettings) {
        const error = searchResult instanceof ImportError_js_1.ImportError ? searchResult : undefined;
        const result = searchResult instanceof ImportError_js_1.ImportError ? undefined : searchResult;
        const filepath = result?.filepath;
        if (filepath) {
            const cached = cachedFiles().get(filepath);
            if (cached) {
                return {
                    config: cached,
                    filepath,
                    error,
                };
            }
        }
        const { config = (0, CSpellSettingsInternalDef_js_1.createCSpellSettingsInternal)({}) } = result || {};
        const filename = result?.filepath ?? searchPath;
        const importRef = { filename: filename, error };
        const id = [path.basename(path.dirname(filename)), path.basename(filename)].join('/');
        const name = result?.filepath ? id : `Config not found: ${id}`;
        const finalizeSettings = (0, CSpellSettingsInternalDef_js_1.createCSpellSettingsInternal)({ id, name, __importRef: importRef });
        const settings = { id, ...config };
        cachedFiles().set(filename, finalizeSettings); // add an empty entry to prevent circular references.
        Object.assign(finalizeSettings, this.normalizeSettings(settings, filename, pnpSettings));
        return {
            config: finalizeSettings,
            filepath,
            error,
        };
    }
}
function mergeSourceList(orig, append) {
    const collection = new Map(orig.map((s) => [s.name + (s.filename || ''), s]));
    for (const s of append || []) {
        const key = s.name + (s.filename || '');
        if (!collection.has(key)) {
            collection.set(key, s);
        }
    }
    return [...collection.values()];
}
/**
 *
 * @param searchFrom the directory / file to start searching from.
 * @param pnpSettings - related to Using Yarn PNP.
 * @returns the resulting settings
 */
function searchForConfig(searchFrom, pnpSettings = PnPSettings_js_1.defaultPnPSettings) {
    return gcl().searchForConfig(searchFrom, pnpSettings);
}
exports.searchForConfig = searchForConfig;
/**
 *
 * @param searchFrom the directory / file to start searching from.
 * @param pnpSettings - related to Using Yarn PNP.
 * @returns the resulting settings
 * @deprecated
 * @deprecationMessage Use `searchForConfig`. It is very difficult to support Sync files when settings include web requests.
 */
function searchForConfigSync(searchFrom, pnpSettings = PnPSettings_js_1.defaultPnPSettings) {
    pnpSettings = (0, PnPSettings_js_1.normalizePnPSettings)(pnpSettings);
    let searchResult;
    try {
        searchResult = cspellConfigExplorerSync().search(searchFrom) || undefined;
    }
    catch (err) {
        searchResult = new ImportError_js_1.ImportError(`Failed to find config file from: "${searchFrom}"`, err);
    }
    return gcl().normalizeSearchForConfigResult(searchFrom || process.cwd(), searchResult, pnpSettings).config;
}
exports.searchForConfigSync = searchForConfigSync;
/**
 * Load a CSpell configuration files.
 * @param file - path or package reference to load.
 * @param pnpSettings - PnP settings
 * @returns normalized CSpellSettings
 */
async function loadConfig(file, pnpSettings = PnPSettings_js_1.defaultPnPSettings) {
    return gcl().readSettingsAsync(file, undefined, pnpSettings);
}
exports.loadConfig = loadConfig;
/**
 * Load a CSpell configuration files.
 * @param filename - path or package reference to load.
 * @param pnpSettings - PnP settings
 * @returns normalized CSpellSettings
 * @deprecated
 */
function loadConfigSync(filename, pnpSettings = PnPSettings_js_1.defaultPnPSettings) {
    const pnp = (0, PnPSettings_js_1.normalizePnPSettings)(pnpSettings);
    return gcl().readSettings(filename, pnp);
}
exports.loadConfigSync = loadConfigSync;
function loadPnP(pnpSettings, searchFrom) {
    if (!pnpSettings.usePnP) {
        return Promise.resolve(undefined);
    }
    const loader = (0, pnpLoader_js_1.pnpLoader)(pnpSettings.pnpFiles);
    return loader.load(searchFrom);
}
exports.loadPnP = loadPnP;
function loadPnPSync(pnpSettings, searchFrom) {
    if (!pnpSettings.usePnP) {
        return undefined;
    }
    const loader = (0, pnpLoader_js_1.pnpLoader)(pnpSettings.pnpFiles);
    return loader.loadSync(searchFrom);
}
exports.loadPnPSync = loadPnPSync;
function readRawSettings(filename, relativeTo) {
    relativeTo = relativeTo || process.cwd();
    const ref = resolveFilename(filename, relativeTo);
    return gcl()._readConfig(ref);
}
exports.readRawSettings = readRawSettings;
function resolveFilename(filename, relativeTo) {
    const r = (0, resolveFile_js_1.resolveFile)(filename, relativeTo);
    return {
        filename: r.filename,
        error: r.found ? undefined : new Error(`Failed to resolve file: "${filename}"`),
    };
}
function getGlobalSettings() {
    return gcl().getGlobalSettings();
}
exports.getGlobalSettings = getGlobalSettings;
function getCachedFileSize() {
    return cachedFiles().size;
}
exports.getCachedFileSize = getCachedFileSize;
function clearCachedSettingsFiles() {
    return gcl().clearCachedSettingsFiles();
}
exports.clearCachedSettingsFiles = clearCachedSettingsFiles;
const nestedConfigDirectories = {
    '.vscode': true,
    '.config': true,
};
function resolveGlobRoot(settings, pathToSettingsFile) {
    const settingsFileDirRaw = path.dirname(pathToSettingsFile);
    const settingsFileDirName = path.basename(settingsFileDirRaw);
    const isNestedConfig = settingsFileDirName in nestedConfigDirectories;
    const isVSCode = settingsFileDirName === '.vscode';
    const settingsFileDir = isNestedConfig ? path.dirname(settingsFileDirRaw) : settingsFileDirRaw;
    const envGlobRoot = process.env[constants_js_1.ENV_CSPELL_GLOB_ROOT];
    const defaultGlobRoot = envGlobRoot ?? '${cwd}';
    const rawRoot = settings.globRoot ??
        (settings.version === constants_js_1.configSettingsFileVersion0_1 ||
            (envGlobRoot && !settings.version) ||
            (isVSCode && !settings.version)
            ? defaultGlobRoot
            : settingsFileDir);
    const globRoot = rawRoot.startsWith('${cwd}') ? rawRoot : path.resolve(settingsFileDir, rawRoot);
    return globRoot;
}
function validationMessage(msg, fileRef) {
    return msg + `\n  File: "${fileRef.filename}"`;
}
function validateRawConfigVersion(config, fileRef) {
    const { version } = config;
    if (version === undefined)
        return;
    if (typeof version !== 'string') {
        (0, logger_js_1.logError)(validationMessage(`Unsupported config file version: "${version}", string expected`, fileRef));
        return;
    }
    if (setOfSupportedConfigVersions.has(version))
        return;
    if (!/^\d+(\.\d+)*$/.test(version)) {
        (0, logger_js_1.logError)(validationMessage(`Unsupported config file version: "${version}"`, fileRef));
        return;
    }
    const msg = version > constants_js_1.currentSettingsFileVersion
        ? `Newer config file version found: "${version}". Supported version is "${constants_js_1.currentSettingsFileVersion}"`
        : `Legacy config file version found: "${version}", upgrade to "${constants_js_1.currentSettingsFileVersion}"`;
    (0, logger_js_1.logWarning)(validationMessage(msg, fileRef));
}
function validateRawConfigExports(config, fileRef) {
    if (config.default) {
        throw new ImportError_js_1.ImportError(validationMessage('Module `export default` is not supported.\n  Use `module.exports =` instead.', fileRef));
    }
}
function validateRawConfig(config, fileRef) {
    const validations = [validateRawConfigExports, validateRawConfigVersion];
    validations.forEach((fn) => fn(config, fileRef));
}
function createConfigLoaderInternal(cspellIO) {
    return new ConfigLoaderInternal(cspellIO ?? (0, cspell_io_1.getDefaultCSpellIO)());
}
function createConfigLoader(cspellIO) {
    return createConfigLoaderInternal(cspellIO);
}
exports.createConfigLoader = createConfigLoader;
function getDefaultConfigLoaderInternal() {
    if (defaultConfigLoader)
        return defaultConfigLoader;
    return (defaultConfigLoader = createConfigLoaderInternal());
}
function getDefaultConfigLoader() {
    return getDefaultConfigLoaderInternal();
}
exports.getDefaultConfigLoader = getDefaultConfigLoader;
function cachedFiles() {
    return gcl()._cachedFiles;
}
function cspellConfigExplorerSync() {
    return gcl()._cspellConfigExplorerSync;
}
exports.__testing__ = {
    getDefaultConfigLoaderInternal,
    normalizeCacheSettings: normalizeRawSettings_js_1.normalizeCacheSettings,
    validateRawConfigExports,
    validateRawConfigVersion,
};
//# sourceMappingURL=configLoader.js.map