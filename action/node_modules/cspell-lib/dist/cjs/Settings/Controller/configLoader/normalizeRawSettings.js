"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeCacheSettings = exports.normalizeSettingsGlobs = exports.normalizeGitignoreRoot = exports.normalizeLanguageSettings = exports.normalizeReporters = exports.normalizeOverrides = exports.normalizeDictionaryDefs = exports.normalizeRawConfig = void 0;
const path = __importStar(require("path"));
const resolveFile_js_1 = require("../../../util/resolveFile.js");
const util = __importStar(require("../../../util/util.js"));
const DictionarySettings_js_1 = require("../../DictionarySettings.js");
const toGlobDef_js_1 = require("./toGlobDef.js");
function normalizeRawConfig(config) {
    if (typeof config.version === 'number') {
        config.version = config.version.toString();
    }
}
exports.normalizeRawConfig = normalizeRawConfig;
function normalizeDictionaryDefs(settings, pathToSettingsFile) {
    const dictionaryDefinitions = (0, DictionarySettings_js_1.mapDictDefsToInternal)(settings.dictionaryDefinitions, pathToSettingsFile);
    const languageSettings = settings.languageSettings?.map((langSetting) => util.clean({
        ...langSetting,
        dictionaryDefinitions: (0, DictionarySettings_js_1.mapDictDefsToInternal)(langSetting.dictionaryDefinitions, pathToSettingsFile),
    }));
    return util.clean({
        dictionaryDefinitions,
        languageSettings,
    });
}
exports.normalizeDictionaryDefs = normalizeDictionaryDefs;
function normalizeOverrides(settings, pathToSettingsFile) {
    const { globRoot = path.dirname(pathToSettingsFile) } = settings;
    const overrides = settings.overrides?.map((override) => {
        const filename = (0, toGlobDef_js_1.toGlobDef)(override.filename, globRoot, pathToSettingsFile);
        const { dictionaryDefinitions, languageSettings } = normalizeDictionaryDefs(override, pathToSettingsFile);
        return util.clean({
            ...override,
            filename,
            dictionaryDefinitions,
            languageSettings: normalizeLanguageSettings(languageSettings),
        });
    });
    return overrides ? { overrides } : {};
}
exports.normalizeOverrides = normalizeOverrides;
function normalizeReporters(settings, pathToSettingsFile) {
    if (settings.reporters === undefined)
        return {};
    const folder = path.dirname(pathToSettingsFile);
    function resolve(s) {
        if (s === 'default')
            return s;
        const r = (0, resolveFile_js_1.resolveFile)(s, folder);
        if (!r.found) {
            throw new Error(`Not found: "${s}"`);
        }
        return r.filename;
    }
    function resolveReporter(s) {
        if (typeof s === 'string') {
            return resolve(s);
        }
        if (!Array.isArray(s) || typeof s[0] !== 'string')
            throw new Error('Invalid Reporter');
        // Preserve the shape of Reporter Setting while resolving the reporter file.
        const [r, ...rest] = s;
        return [resolve(r), ...rest];
    }
    return {
        reporters: settings.reporters.map(resolveReporter),
    };
}
exports.normalizeReporters = normalizeReporters;
function normalizeLanguageSettings(languageSettings) {
    if (!languageSettings)
        return undefined;
    function fixLocale(s) {
        const { local: locale, ...rest } = s;
        return util.clean({ locale, ...rest });
    }
    return languageSettings.map(fixLocale);
}
exports.normalizeLanguageSettings = normalizeLanguageSettings;
function normalizeGitignoreRoot(settings, pathToSettingsFile) {
    const { gitignoreRoot } = settings;
    if (!gitignoreRoot)
        return {};
    const dir = path.dirname(pathToSettingsFile);
    const roots = Array.isArray(gitignoreRoot) ? gitignoreRoot : [gitignoreRoot];
    return {
        gitignoreRoot: roots.map((p) => path.resolve(dir, p)),
    };
}
exports.normalizeGitignoreRoot = normalizeGitignoreRoot;
function normalizeSettingsGlobs(settings, pathToSettingsFile) {
    const { globRoot } = settings;
    if (settings.ignorePaths === undefined)
        return {};
    const ignorePaths = (0, toGlobDef_js_1.toGlobDef)(settings.ignorePaths, globRoot, pathToSettingsFile);
    return {
        ignorePaths,
    };
}
exports.normalizeSettingsGlobs = normalizeSettingsGlobs;
function normalizeCacheSettings(settings, pathToSettingsDir) {
    const { cache } = settings;
    if (cache === undefined)
        return {};
    const { cacheLocation } = cache;
    if (cacheLocation === undefined)
        return { cache };
    return { cache: { ...cache, cacheLocation: resolveFilePath(cacheLocation, pathToSettingsDir) } };
}
exports.normalizeCacheSettings = normalizeCacheSettings;
function resolveFilePath(filename, pathToSettingsFile) {
    const cwd = process.cwd();
    return path.resolve(pathToSettingsFile, filename.replace('${cwd}', cwd));
}
//# sourceMappingURL=normalizeRawSettings.js.map