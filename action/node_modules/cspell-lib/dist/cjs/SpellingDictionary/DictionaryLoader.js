"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.refreshCacheEntries = exports.loadDictionarySync = exports.loadDictionary = exports.getDictionaryLoader = void 0;
const static_js_1 = require("../static.js");
const index_js_1 = require("./DictionaryController/index.js");
let loader;
function getDictionaryLoader(cspellIO) {
    if (loader)
        return loader;
    return (loader = new index_js_1.DictionaryLoader(cspellIO || (0, static_js_1.getCSpellIO)()));
}
exports.getDictionaryLoader = getDictionaryLoader;
function loadDictionary(def) {
    return getDictionaryLoader().loadDictionary(def);
}
exports.loadDictionary = loadDictionary;
function loadDictionarySync(def) {
    return getDictionaryLoader().loadDictionarySync(def);
}
exports.loadDictionarySync = loadDictionarySync;
/**
 * Check to see if any of the cached dictionaries have changed. If one has changed, reload it.
 * @param maxAge - Only check the dictionary if it has been at least `maxAge` ms since the last check.
 * @param now - optional timestamp representing now. (Mostly used in testing)
 */
async function refreshCacheEntries(maxAge, now) {
    return getDictionaryLoader().refreshCacheEntries(maxAge, now);
}
exports.refreshCacheEntries = refreshCacheEntries;
//# sourceMappingURL=DictionaryLoader.js.map