"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DictionaryLoader = void 0;
const sync_1 = require("@cspell/cspell-pipe/sync");
const strong_weak_map_1 = require("@cspell/strong-weak-map");
const cspell_dictionary_1 = require("cspell-dictionary");
const CSpellSettingsInternalDef_js_1 = require("../../Models/CSpellSettingsInternalDef.js");
const AutoResolve_js_1 = require("../../util/AutoResolve.js");
const errors_js_1 = require("../../util/errors.js");
const SpellingDictionaryError_js_1 = require("../SpellingDictionaryError.js");
const MAX_AGE = 10000;
const loaders = {
    S: loadSimpleWordList,
    C: legacyWordList,
    W: wordsPerLineWordList,
    T: loadTrie,
    default: loadSimpleWordList,
};
const loadersSync = {
    S: loadSimpleWordListSync,
    C: legacyWordListSync,
    W: wordsPerLineWordListSync,
    T: loadTrieSync,
    default: loadSimpleWordListSync,
};
var LoadingState;
(function (LoadingState) {
    LoadingState[LoadingState["Loaded"] = 0] = "Loaded";
    LoadingState[LoadingState["Loading"] = 1] = "Loading";
})(LoadingState || (LoadingState = {}));
class DictionaryLoader {
    constructor(cspellIO) {
        this.cspellIO = cspellIO;
        this.dictionaryCache = new strong_weak_map_1.StrongWeakMap();
        this.inlineDictionaryCache = new AutoResolve_js_1.AutoResolveWeakCache();
        this.dictionaryCacheByDef = new strong_weak_map_1.StrongWeakMap();
        this.reader = toReader(cspellIO);
        this.readerSync = toReaderSync(cspellIO);
    }
    loadDictionary(def) {
        if ((0, CSpellSettingsInternalDef_js_1.isDictionaryDefinitionInlineInternal)(def)) {
            return Promise.resolve(this.loadInlineDict(def));
        }
        const { key, entry } = this.getCacheEntry(def);
        if (entry) {
            return entry.pending.then(([dictionary]) => dictionary);
        }
        const loadedEntry = this.loadEntry(def.path, def);
        this.setCacheEntry(key, loadedEntry, def);
        return loadedEntry.pending.then(([dictionary]) => dictionary);
    }
    loadDictionarySync(def) {
        if ((0, CSpellSettingsInternalDef_js_1.isDictionaryDefinitionInlineInternal)(def)) {
            return this.loadInlineDict(def);
        }
        const { key, entry } = this.getCacheEntry(def);
        if (entry?.dictionary && entry.loadingState === LoadingState.Loaded) {
            return entry.dictionary;
        }
        const loadedEntry = this.loadEntrySync(def.path, def);
        this.setCacheEntry(key, loadedEntry, def);
        return loadedEntry.dictionary;
    }
    /**
     * Check to see if any of the cached dictionaries have changed. If one has changed, reload it.
     * @param maxAge - Only check the dictionary if it has been at least `maxAge` ms since the last check.
     * @param now - optional timestamp representing now. (Mostly used in testing)
     */
    async refreshCacheEntries(maxAge = MAX_AGE, now = Date.now()) {
        await Promise.all([...this.dictionaryCache.values()].map((entry) => this.refreshEntry(entry, maxAge, now)));
    }
    getCacheEntry(def) {
        const defEntry = this.dictionaryCacheByDef.get(def);
        if (defEntry) {
            return defEntry;
        }
        const key = calcKey(def);
        const entry = this.dictionaryCache.get(key);
        if (entry) {
            // replace old entry so it can be released.
            entry.options = def;
        }
        return { key, entry };
    }
    setCacheEntry(key, entry, def) {
        this.dictionaryCache.set(key, entry);
        this.dictionaryCacheByDef.set(def, { key, entry });
    }
    async refreshEntry(entry, maxAge, now) {
        if (now - entry.ts >= maxAge) {
            const sig = now + Math.random();
            // Write to the ts, so the next one will not do it.
            entry.sig = sig;
            entry.ts = now;
            const pStat = this.getStat(entry.uri);
            const [newStat] = await Promise.all([pStat, entry.pending]);
            const hasChanged = !this.isEqual(newStat, entry.stat);
            const sigMatches = entry.sig === sig;
            if (sigMatches && hasChanged) {
                entry.loadingState = LoadingState.Loading;
                const key = calcKey(entry.options);
                const newEntry = this.loadEntry(entry.uri, entry.options);
                this.dictionaryCache.set(key, newEntry);
                this.dictionaryCacheByDef.set(entry.options, { key, entry: newEntry });
            }
        }
    }
    loadEntry(uri, options, now = Date.now()) {
        options = this.normalizeOptions(uri, options);
        const pDictionary = load(this.reader, uri, options).catch((e) => (0, cspell_dictionary_1.createFailedToLoadDictionary)(options.name, uri, new SpellingDictionaryError_js_1.SpellingDictionaryLoadError(uri, options, e, 'failed to load'), options));
        const pStat = this.getStat(uri);
        const pending = Promise.all([pDictionary, pStat]);
        const sig = now + Math.random();
        const entry = {
            uri,
            options,
            ts: now,
            stat: undefined,
            dictionary: undefined,
            pending,
            loadingState: LoadingState.Loading,
            sig,
        };
        // eslint-disable-next-line promise/catch-or-return
        pending.then(([dictionary, stat]) => {
            entry.stat = stat;
            entry.dictionary = dictionary;
            entry.loadingState = LoadingState.Loaded;
            return;
        });
        return entry;
    }
    loadEntrySync(uri, options, now = Date.now()) {
        options = this.normalizeOptions(uri, options);
        const stat = this.getStatSync(uri);
        const sig = now + Math.random();
        try {
            const dictionary = loadSync(this.readerSync, uri, options);
            const pending = Promise.resolve([dictionary, stat]);
            return {
                uri,
                options,
                ts: now,
                stat,
                dictionary,
                pending,
                loadingState: LoadingState.Loaded,
                sig,
            };
        }
        catch (e) {
            const error = (0, errors_js_1.toError)(e);
            const dictionary = (0, cspell_dictionary_1.createFailedToLoadDictionary)(options.name, uri, new SpellingDictionaryError_js_1.SpellingDictionaryLoadError(uri, options, error, 'failed to load'), options);
            const pending = Promise.resolve([dictionary, stat]);
            return {
                uri,
                options,
                ts: now,
                stat,
                dictionary,
                pending,
                loadingState: LoadingState.Loaded,
                sig,
            };
        }
    }
    getStat(uri) {
        return this.cspellIO.getStat(uri).catch(errors_js_1.toError);
    }
    getStatSync(uri) {
        try {
            return this.cspellIO.getStatSync(uri);
        }
        catch (e) {
            return (0, errors_js_1.toError)(e);
        }
    }
    isEqual(a, b) {
        if (!b)
            return false;
        if (isError(a)) {
            return isError(b) && a.message === b.message && a.name === b.name;
        }
        return !isError(b) && !this.cspellIO.compareStats(a, b);
    }
    normalizeOptions(uri, options) {
        if (options.name)
            return options;
        return { ...options, name: this.cspellIO.uriBasename(uri) };
    }
    loadInlineDict(def) {
        return this.inlineDictionaryCache.get(def, (def) => (0, cspell_dictionary_1.createInlineSpellingDictionary)(def, def.__source || 'memory'));
    }
}
exports.DictionaryLoader = DictionaryLoader;
function toReader(cspellIO) {
    return async function (filename) {
        const res = await cspellIO.readFile(filename);
        return res.content.split(/\n|\r\n|\r/);
    };
}
function toReaderSync(cspellIO) {
    return function (filename) {
        const res = cspellIO.readFileSync(filename);
        return res.content.split(/\n|\r\n|\r/);
    };
}
const importantOptionKeys = ['name', 'noSuggest', 'useCompounds', 'type'];
function calcKey(def) {
    const path = def.path;
    const loaderType = determineType(path, def);
    const optValues = importantOptionKeys.map((k) => def[k]?.toString() || '');
    const parts = [path, loaderType].concat(optValues);
    return parts.join('|');
}
function isError(e) {
    const err = e;
    return !!err.message;
}
function determineType(uri, opts) {
    const t = (opts.type && opts.type in loaders && opts.type) || 'S';
    const defLoaderType = t;
    const defType = uri.endsWith('.trie.gz') ? 'T' : defLoaderType;
    const regTrieTest = /\.trie\b/i;
    return regTrieTest.test(uri) ? 'T' : defType;
}
function load(reader, uri, options) {
    const type = determineType(uri, options);
    const loader = loaders[type] || loaders.default;
    return loader(reader, uri, options);
}
function loadSync(reader, uri, options) {
    const type = determineType(uri, options);
    const loader = loadersSync[type] || loaders.default;
    return loader(reader, uri, options);
}
async function legacyWordList(readLines, filename, options) {
    const lines = await readLines(filename);
    return _legacyWordListSync(lines, filename, options);
}
function legacyWordListSync(readLinesSync, filename, options) {
    const lines = readLinesSync(filename);
    return _legacyWordListSync(lines, filename, options);
}
function _legacyWordListSync(lines, filename, options) {
    const words = (0, sync_1.pipe)(lines, 
    // Remove comments
    (0, sync_1.opMap)((line) => line.replace(/#.*/g, '')), 
    // Split on everything else
    (0, sync_1.opConcatMap)((line) => line.split(/[^\w\p{L}\p{M}'â€™]+/gu)), (0, sync_1.opFilter)((word) => !!word));
    return (0, cspell_dictionary_1.createSpellingDictionary)(words, options.name, filename, options);
}
async function wordsPerLineWordList(readLines, filename, options) {
    const lines = await readLines(filename);
    return _wordsPerLineWordList(lines, filename, options);
}
function wordsPerLineWordListSync(readLinesSync, filename, options) {
    const lines = readLinesSync(filename);
    return _wordsPerLineWordList(lines, filename, options);
}
function _wordsPerLineWordList(lines, filename, options) {
    const words = (0, sync_1.pipe)(lines, 
    // Remove comments
    (0, sync_1.opMap)((line) => line.replace(/#.*/g, '')), 
    // Split on everything else
    (0, sync_1.opConcatMap)((line) => line.split(/\s+/gu)), (0, sync_1.opFilter)((word) => !!word));
    return (0, cspell_dictionary_1.createSpellingDictionary)(words, options.name, filename, options);
}
async function loadSimpleWordList(reader, filename, options) {
    const lines = await reader(filename);
    return (0, cspell_dictionary_1.createSpellingDictionary)(lines, options.name, filename, options);
}
function loadSimpleWordListSync(readLinesSync, filename, options) {
    const lines = readLinesSync(filename);
    return (0, cspell_dictionary_1.createSpellingDictionary)(lines, options.name, filename, options);
}
async function loadTrie(readLines, filename, options) {
    const lines = await readLines(filename);
    return (0, cspell_dictionary_1.createSpellingDictionaryFromTrieFile)(lines, options.name, filename, options);
}
function loadTrieSync(readLinesSync, filename, options) {
    const lines = readLinesSync(filename);
    return (0, cspell_dictionary_1.createSpellingDictionaryFromTrieFile)(lines, options.name, filename, options);
}
//# sourceMappingURL=DictionaryLoader.js.map