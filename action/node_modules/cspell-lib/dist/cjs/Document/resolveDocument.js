"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDocument = exports.resolveDocumentToTextDocument = exports.documentToTextDocument = exports.fileToTextDocument = exports.fileToDocument = void 0;
const promises_1 = require("fs/promises");
const TextDocument_js_1 = require("../Models/TextDocument.js");
const Uri = __importStar(require("../util/Uri.js"));
const util_js_1 = require("../util/util.js");
const defaultEncoding = 'utf8';
function fileToDocument(file, text, languageId, locale) {
    return (0, util_js_1.clean)({
        uri: Uri.toUri(file).toString(),
        text,
        languageId,
        locale,
    });
}
exports.fileToDocument = fileToDocument;
async function fileToTextDocument(file) {
    return documentToTextDocument(await resolveDocument(fileToDocument(file)));
}
exports.fileToTextDocument = fileToTextDocument;
function documentToTextDocument(document) {
    const { uri, text: content, languageId, locale } = document;
    return (0, TextDocument_js_1.createTextDocument)({ uri, content, languageId, locale });
}
exports.documentToTextDocument = documentToTextDocument;
async function resolveDocumentToTextDocument(doc) {
    return documentToTextDocument(await resolveDocument(doc));
}
exports.resolveDocumentToTextDocument = resolveDocumentToTextDocument;
async function readDocument(filename, encoding = defaultEncoding) {
    const text = await (0, promises_1.readFile)(filename, encoding);
    const uri = Uri.toUri(filename).toString();
    return {
        uri,
        text,
    };
}
function resolveDocument(document, encoding) {
    if (isDocumentWithText(document))
        return Promise.resolve(document);
    const uri = Uri.toUri(document.uri);
    if (uri.scheme !== 'file') {
        throw new Error(`Unsupported schema: "${uri.scheme}", open "${uri.toString()}"`);
    }
    return readDocument(Uri.uriToFilePath(uri), encoding);
}
exports.resolveDocument = resolveDocument;
function isDocumentWithText(doc) {
    return doc.text !== undefined;
}
//# sourceMappingURL=resolveDocument.js.map