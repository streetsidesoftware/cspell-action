"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._testMethods = exports.mapLineSegmentAgainstRangesFactory = exports.calcTextInclusionRanges = exports.validateText = void 0;
const sync_1 = require("@cspell/cspell-pipe/sync");
const Text = __importStar(require("../util/text.js"));
const TextRange = __importStar(require("../util/TextRange.js"));
const defaultConstants_js_1 = require("./defaultConstants.js");
const lineValidatorFactory_js_1 = require("./lineValidatorFactory.js");
/**
 * @deprecated
 * @deprecation Use spellCheckDocument
 */
function validateText(text, dict, options) {
    const { maxNumberOfProblems = defaultConstants_js_1.defaultMaxNumberOfProblems, maxDuplicateProblems = defaultConstants_js_1.defaultMaxDuplicateProblems } = options;
    const mapOfProblems = new Map();
    const includeRanges = calcTextInclusionRanges(text, options);
    const lineValidator = (0, lineValidatorFactory_js_1.lineValidatorFactory)(dict, options);
    const validator = lineValidator.fn;
    const iter = (0, sync_1.pipe)(Text.extractLinesOfText(text), (0, sync_1.opConcatMap)(mapLineToLineSegments(includeRanges)), (0, sync_1.opConcatMap)(validator), (0, sync_1.opFilter)((wo) => {
        const word = wo.text;
        // Keep track of the number of times we have seen the same problem
        const n = (mapOfProblems.get(word) || 0) + 1;
        mapOfProblems.set(word, n);
        // Filter out if there is too many
        return n <= maxDuplicateProblems;
    }), (0, sync_1.opTake)(maxNumberOfProblems));
    return iter;
}
exports.validateText = validateText;
function calcTextInclusionRanges(text, options) {
    const { ignoreRegExpList = [], includeRegExpList = [] } = options;
    const filteredIncludeList = includeRegExpList.filter((a) => !!a);
    const finalIncludeList = filteredIncludeList.length ? filteredIncludeList : [/.*/gim];
    const includeRanges = TextRange.excludeRanges(TextRange.findMatchingRangesForPatterns(finalIncludeList, text), TextRange.findMatchingRangesForPatterns(ignoreRegExpList, text));
    return includeRanges;
}
exports.calcTextInclusionRanges = calcTextInclusionRanges;
function mapLineToLineSegments(includeRanges) {
    const mapAgainstRanges = mapLineSegmentAgainstRangesFactory(includeRanges);
    return (line) => {
        const segment = { line, segment: line };
        return mapAgainstRanges(segment);
    };
}
/**
 * Returns a mapper function that will segment a TextOffset based upon the includeRanges.
 * This function is optimized for forward scanning. It will perform poorly for randomly ordered offsets.
 * @param includeRanges Allowed ranges for words.
 */
function mapLineSegmentAgainstRangesFactory(includeRanges) {
    let rangePos = 0;
    const mapper = (lineSeg) => {
        if (!includeRanges.length) {
            return [];
        }
        const parts = [];
        const { segment, line } = lineSeg;
        const { text, offset, length } = segment;
        const textEndPos = offset + (length ?? text.length);
        let textStartPos = offset;
        while (rangePos && (rangePos >= includeRanges.length || includeRanges[rangePos].startPos > textStartPos)) {
            rangePos -= 1;
        }
        const cur = includeRanges[rangePos];
        if (textEndPos <= cur.endPos && textStartPos >= cur.startPos) {
            return [lineSeg];
        }
        while (textStartPos < textEndPos) {
            while (includeRanges[rangePos] && includeRanges[rangePos].endPos <= textStartPos) {
                rangePos += 1;
            }
            if (!includeRanges[rangePos]) {
                break;
            }
            const { startPos, endPos } = includeRanges[rangePos];
            if (textEndPos < startPos) {
                break;
            }
            const a = Math.max(textStartPos, startPos);
            const b = Math.min(textEndPos, endPos);
            if (a !== b) {
                parts.push({ line, segment: { offset: a, text: text.slice(a - offset, b - offset) } });
            }
            textStartPos = b;
        }
        return parts;
    };
    return mapper;
}
exports.mapLineSegmentAgainstRangesFactory = mapLineSegmentAgainstRangesFactory;
exports._testMethods = {
    mapWordsAgainstRanges: mapLineSegmentAgainstRangesFactory,
};
//# sourceMappingURL=textValidator.js.map