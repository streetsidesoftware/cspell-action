"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genCheckText = exports.checkTextDocument = exports.IncludeExcludeFlag = exports.checkTextOld = exports.checkText = void 0;
const assert_1 = __importDefault(require("assert"));
const resolveDocument_js_1 = require("../Document/resolveDocument.js");
const TextDocument_js_1 = require("../Models/TextDocument.js");
const Settings = __importStar(require("../Settings/index.js"));
const util_js_1 = require("../util/util.js");
const docValidator_js_1 = require("./docValidator.js");
const textValidator_js_1 = require("./textValidator.js");
const validator_js_1 = require("./validator.js");
/**
 * Annotate text with issues and include / exclude zones.
 * @param text - the text to annotate.
 * @param settings - the settings to use.
 * @returns the Check Text result
 * @deprecated
 */
async function checkText(text, settings) {
    const languageId = settings.languageId || 'plaintext';
    const doc = (0, util_js_1.clean)({
        uri: '',
        text,
        languageId: Array.isArray(languageId) ? languageId.join(',') : languageId,
        locale: settings.language,
    });
    return checkTextDocument(doc, { noConfigSearch: true }, { loadDefaultConfiguration: false, ...settings });
}
exports.checkText = checkText;
/**
 * Annotate text with issues and include / exclude zones.
 * @param text - the text to annotate.
 * @param settings - the settings to use.
 * @returns the Check Text result
 * @deprecated
 */
async function checkTextOld(text, settings) {
    const validationResult = (0, validator_js_1.validateText)(text, settings);
    const finalSettings = Settings.finalizeSettings(settings);
    const includeRanges = (0, textValidator_js_1.calcTextInclusionRanges)(text, finalSettings);
    const issues = await validationResult;
    return genResult(text, issues, includeRanges);
}
exports.checkTextOld = checkTextOld;
var IncludeExcludeFlag;
(function (IncludeExcludeFlag) {
    IncludeExcludeFlag["INCLUDE"] = "I";
    IncludeExcludeFlag["EXCLUDE"] = "E";
})(IncludeExcludeFlag || (exports.IncludeExcludeFlag = IncludeExcludeFlag = {}));
/**
 * Calculate document issues and include / exclude zones.
 * @param doc - document to check
 * @param options - check options
 * @param settings - optional settings
 * @returns
 */
async function checkTextDocument(doc, options, settings = {}) {
    doc = (0, TextDocument_js_1.isTextDocument)(doc) ? doc : await (0, resolveDocument_js_1.resolveDocumentToTextDocument)(doc);
    return genCheckText(new docValidator_js_1.DocumentValidator(doc, options, settings));
}
exports.checkTextDocument = checkTextDocument;
async function genCheckText(docValidator) {
    await docValidator.prepare();
    const issues = docValidator.checkDocument(true);
    const preparations = docValidator._getPreparations();
    (0, assert_1.default)(preparations);
    return genResult(docValidator.document.text, issues, preparations.includeRanges);
}
exports.genCheckText = genCheckText;
function genResult(text, issues, includeRanges) {
    const result = [];
    let lastPos = 0;
    for (const { startPos, endPos } of includeRanges) {
        result.push({
            text: text.slice(lastPos, startPos),
            startPos: lastPos,
            endPos: startPos,
            flagIE: IncludeExcludeFlag.EXCLUDE,
        });
        result.push({
            text: text.slice(startPos, endPos),
            startPos,
            endPos,
            flagIE: IncludeExcludeFlag.INCLUDE,
        });
        lastPos = endPos;
    }
    result.push({
        text: text.slice(lastPos),
        startPos: lastPos,
        endPos: text.length,
        flagIE: IncludeExcludeFlag.EXCLUDE,
    });
    function* merge() {
        let i = 0;
        for (const r of result) {
            if (i >= issues.length || issues[i].offset >= r.endPos) {
                yield r;
                continue;
            }
            const span = { ...r };
            while (i < issues.length && issues[i].offset < span.endPos) {
                const issue = issues[i];
                const endPos = issue.offset;
                const text = span.text.slice(0, endPos - span.startPos);
                const endPosError = issue.offset + issue.text.length;
                yield { ...span, text, endPos };
                yield {
                    ...span,
                    isError: true,
                    startPos: issue.offset,
                    endPos: endPosError,
                    text: issue.text,
                };
                span.text = span.text.slice(endPosError - span.startPos);
                span.startPos = endPosError;
                i += 1;
            }
            yield span;
        }
    }
    return {
        text,
        items: [...merge()].filter((i) => i.startPos < i.endPos),
    };
}
//# sourceMappingURL=checkText.js.map