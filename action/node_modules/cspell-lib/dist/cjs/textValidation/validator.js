"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateText = exports.diagSource = void 0;
const cspell_types_1 = require("@cspell/cspell-types");
const TextDocument_js_1 = require("../Models/TextDocument.js");
const Settings = __importStar(require("../Settings/index.js"));
const InDocSettings_js_1 = require("../Settings/InDocSettings.js");
const index_js_1 = require("../SpellingDictionary/index.js");
const settingsToValidateOptions_js_1 = require("./settingsToValidateOptions.js");
const textValidator_js_1 = require("./textValidator.js");
exports.diagSource = 'cSpell Checker';
/**
 * @deprecated
 * @deprecationMessage Use spellCheckDocument
 */
async function validateText(text, settings, options = {}) {
    const finalSettings = Settings.finalizeSettings(settings);
    const dict = await (0, index_js_1.getDictionaryInternal)(finalSettings);
    const spellingIssues = [...(0, textValidator_js_1.validateText)(text, dict, (0, settingsToValidateOptions_js_1.settingsToValidateOptions)(finalSettings))];
    const validationIssues = options.validateDirectives || finalSettings.validateDirectives
        ? (0, InDocSettings_js_1.validateInDocumentSettings)(text, settings)
        : [];
    const issues = spellingIssues.concat(mapValidationIssues(text, validationIssues));
    if (!options.generateSuggestions) {
        return issues;
    }
    const sugOptions = {
        numSuggestions: options.numSuggestions,
        compoundMethod: index_js_1.CompoundWordsMethod.NONE,
        includeTies: false,
        ignoreCase: !(settings.caseSensitive ?? false),
        timeout: settings.suggestionsTimeout,
        numChanges: settings.suggestionNumChanges,
    };
    const withSugs = issues.map((t) => {
        const text = t.text;
        const suggestionsEx = dict
            .suggest(text, sugOptions)
            .map(({ word, isPreferred }) => (isPreferred ? { word, isPreferred } : { word }));
        t.suggestions = suggestionsEx.map((s) => s.word);
        t.suggestionsEx = suggestionsEx;
        return t;
    });
    return withSugs;
}
exports.validateText = validateText;
function mapValidationIssues(text, valIssues) {
    const issues = [...valIssues];
    if (!issues.length)
        return [];
    const document = (0, TextDocument_js_1.createTextDocument)({ uri: '', content: text });
    const issueType = cspell_types_1.IssueType.directive;
    function toValidationIssue(dirIssue) {
        const { text, range, suggestions, suggestionsEx, message } = dirIssue;
        const offset = range[0];
        const pos = document.positionAt(offset);
        const line = document.getLine(pos.line);
        const issue = { text, offset, line, suggestions, suggestionsEx, message, issueType };
        return issue;
    }
    return issues.map(toValidationIssue);
}
//# sourceMappingURL=validator.js.map