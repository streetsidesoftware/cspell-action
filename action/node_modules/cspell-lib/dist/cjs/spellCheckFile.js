"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineFinalDocumentSettings = exports.spellCheckDocument = exports.spellCheckFile = void 0;
const isBinaryDoc_js_1 = require("./Document/isBinaryDoc.js");
const resolveDocument_js_1 = require("./Document/resolveDocument.js");
const TextDocument_js_1 = require("./Models/TextDocument.js");
const determineTextDocumentSettings_js_1 = require("./textValidation/determineTextDocumentSettings.js");
const index_js_1 = require("./textValidation/index.js");
const errors_js_1 = require("./util/errors.js");
const Uri_js_1 = require("./util/Uri.js");
/**
 * Spell Check a file
 * @param file - absolute path to file to read and check.
 * @param options - options to control checking
 * @param settings - default settings to use.
 */
function spellCheckFile(file, options, settings) {
    const doc = {
        uri: (0, Uri_js_1.toUri)(file).toString(),
    };
    return spellCheckDocument(doc, options, settings);
}
exports.spellCheckFile = spellCheckFile;
/**
 * Spell Check a Document.
 * @param document - document to be checked. If `document.text` is `undefined` the file will be loaded
 * @param options - options to control checking
 * @param settings - default settings to use.
 */
async function spellCheckDocument(document, options, settings) {
    if ((0, isBinaryDoc_js_1.isBinaryDoc)(document)) {
        return {
            document,
            options,
            settingsUsed: settings,
            localConfigFilepath: undefined,
            issues: [],
            checked: false,
            errors: undefined,
        };
    }
    try {
        return spellCheckFullDocument(await (0, resolveDocument_js_1.resolveDocument)(document), options, settings);
    }
    catch (e) {
        const errors = (0, errors_js_1.isError)(e) ? [e] : [];
        return {
            document,
            options,
            settingsUsed: settings,
            localConfigFilepath: undefined,
            issues: [],
            checked: false,
            errors,
        };
    }
}
exports.spellCheckDocument = spellCheckDocument;
async function spellCheckFullDocument(document, options, settings) {
    const doc = (0, resolveDocument_js_1.documentToTextDocument)(document);
    const docValOptions = options;
    const docValidator = new index_js_1.DocumentValidator(doc, docValOptions, settings);
    await docValidator.prepare();
    const prep = docValidator._getPreparations();
    if (docValidator.errors.length) {
        return {
            document,
            options,
            settingsUsed: prep?.localConfig || settings,
            localConfigFilepath: prep?.localConfigFilepath,
            issues: [],
            checked: false,
            errors: docValidator.errors,
        };
    }
    const issues = docValidator.checkDocument();
    const result = {
        document,
        options,
        settingsUsed: docValidator.getFinalizedDocSettings(),
        localConfigFilepath: prep?.localConfigFilepath,
        issues,
        checked: docValidator.shouldCheckDocument(),
        errors: undefined,
    };
    return result;
}
/**
 * Combines all relevant setting values into a final configuration to be used for spell checking.
 * It applies any overrides and appropriate language settings by taking into account the document type (languageId)
 * the locale (natural language) and any in document settings.
 *
 * Note: this method will not search for configuration files. Configuration files should already be merged into `settings`.
 * It is NOT necessary to include the cspell defaultSettings or globalSettings. They will be applied within this function.
 * @param document - The document to be spell checked. Note: if the URI doesn't have a path, overrides cannot be applied.
 *   `locale` - if defined will be used unless it is overridden by an in-document setting.
 *   `languageId` - if defined will be used to select appropriate file type dictionaries.
 * @param settings - The near final settings. Should already be the combination of all configuration files.
 */
function determineFinalDocumentSettings(document, settings) {
    const doc = (0, TextDocument_js_1.createTextDocument)({
        uri: document.uri,
        content: document.text,
        languageId: document.languageId,
        locale: document.locale,
    });
    return {
        document,
        settings: (0, determineTextDocumentSettings_js_1.determineTextDocumentSettings)(doc, settings),
    };
}
exports.determineFinalDocumentSettings = determineFinalDocumentSettings;
//# sourceMappingURL=spellCheckFile.js.map