import type { Uri } from '../../util/Uri.mjs';
export type LoaderResult = Uri | undefined;
export declare class PnpLoader {
    readonly pnpFiles: string[];
    private cacheKeySuffix;
    constructor(pnpFiles?: string[]);
    /**
     * Request that the nearest .pnp file gets loaded
     * @param uriDirectory starting directory
     * @returns promise - rejects on error - success if loaded or not found.
     */
    load(uriDirectory: Uri): Promise<LoaderResult>;
    peek(uriDirectory: Uri): Promise<LoaderResult>;
    /**
     * Request that the nearest .pnp file gets loaded
     * @param uriDirectory starting directory
     * @returns promise - rejects on error - success if loaded or not found.
     */
    loadSync(uriDirectory: Uri): LoaderResult;
    peekSync(uriDirectory: Uri): LoaderResult;
    /**
     * Clears the cached so .pnp files will get reloaded on request.
     */
    clearCache(): Promise<void>;
    private calcKey;
}
export declare function pnpLoader(pnpFiles?: string[]): PnpLoader;
export declare function clearPnPGlobalCache(): Promise<undefined>;
//# sourceMappingURL=pnpLoader.d.mts.map