import type { CSpellUserSettings, ImportFileRef } from '@cspell/cspell-types';
import type { CSpellIO } from 'cspell-io';
import type { Uri } from '../../../util/Uri.mjs';
import { ImportError } from '../ImportError.mjs';
import type { LoaderResult } from '../pnpLoader.mjs';
import { normalizeCacheSettings } from './normalizeRawSettings.mjs';
import type { PnPSettingsOptional } from './PnPSettings.mjs';
import type { CSpellSettingsI, CSpellSettingsWST } from './types.mjs';
export declare const sectionCSpell = "cSpell";
export declare const defaultFileName = "cspell.json";
export declare const defaultConfigFilenames: readonly string[];
export declare class ConfigLoader {
    readonly cspellIO: CSpellIO;
    /**
     * Use `createConfigLoader`
     * @param cspellIO - CSpellIO interface for reading files.
     */
    protected constructor(cspellIO: CSpellIO);
    protected cachedFiles: Map<string, import("../../../Models/CSpellSettingsInternalDef.js").CSpellSettingsInternal>;
    protected cspellConfigExplorer: {
        readonly search: (searchFrom?: string | undefined) => Promise<import("cosmiconfig/dist/types.js").CosmiconfigResult>;
        readonly load: (filepath: string) => Promise<import("cosmiconfig/dist/types.js").CosmiconfigResult>;
        readonly clearLoadCache: () => void;
        readonly clearSearchCache: () => void;
        readonly clearCaches: () => void;
    };
    protected cspellConfigExplorerSync: {
        readonly search: (searchFrom?: string | undefined) => import("cosmiconfig/dist/types.js").CosmiconfigResult;
        readonly load: (filepath: string) => import("cosmiconfig/dist/types.js").CosmiconfigResult;
        readonly clearLoadCache: () => void;
        readonly clearSearchCache: () => void;
        readonly clearCaches: () => void;
    };
    protected globalSettings: CSpellSettingsI | undefined;
    /**
     * Read / import a cspell configuration file.
     * @param filename - the path to the file.
     *   Supported types: json, yaml, js, and cjs. ES Modules are not supported.
     *   - absolute path `/absolute/path/to/file`
     *   - relative path `./path/to/file` (relative to the current working directory)
     *   - package `@cspell/dict-typescript/cspell-ext.json`
     */
    readSettings(filename: string): CSpellSettingsI;
    readSettings(filename: string, defaultValues: CSpellSettingsWST): CSpellSettingsI;
    /**
     * Read / import a cspell configuration file.
     * @param filename - the path to the file.
     *   Supported types: json, yaml, js, and cjs. ES Modules are not supported.
     *   - absolute path `/absolute/path/to/file`
     *   - relative path `./path/to/file` (relative to `relativeTo`)
     *   - package `@cspell/dict-typescript/cspell-ext.json` searches for node_modules relative to `relativeTo`
     * @param relativeTo - absolute path to start searching for relative files or node_modules.
     */
    readSettings(filename: string, relativeTo?: string): CSpellSettingsI;
    readSettings(filename: string, relativeTo: string, defaultValues: CSpellSettingsWST): CSpellSettingsI;
    readSettings(filename: string, relativeToOrDefault?: CSpellSettingsWST | string): CSpellSettingsI;
    readSettingsAsync(filename: string, relativeTo?: string, pnpSettings?: PnPSettingsOptional): Promise<CSpellSettingsI>;
    /**
     *
     * @param searchFrom the directory / file to start searching from.
     * @param pnpSettings - related to Using Yarn PNP.
     * @returns the resulting settings
     */
    searchForConfig(searchFrom: string | undefined, pnpSettings?: PnPSettingsOptional): Promise<CSpellSettingsI | undefined>;
    private searchConfigLRU;
    private _searchForConfig;
    getGlobalSettings(): CSpellSettingsI;
    clearCachedSettingsFiles(): void;
    /**
     * Read a config file and inject the fileRef.
     * @param fileRef - filename plus context, injected into the resulting config.
     */
    protected readConfig(fileRef: ImportFileRef): CSpellSettingsWST;
    protected importSettings(fileRef: ImportFileRef, defaultValues: CSpellSettingsWST | undefined, pnpSettings: PnPSettingsOptional): CSpellSettingsI;
    /**
     * normalizeSettings handles correcting all relative paths, anchoring globs, and importing other config files.
     * @param rawSettings - raw configuration settings
     * @param pathToSettingsFile - path to the source file of the configuration settings.
     */
    protected normalizeSettings(rawSettings: CSpellSettingsWST, pathToSettingsFile: string, pnpSettings: PnPSettingsOptional): CSpellSettingsI;
}
declare class ConfigLoaderInternal extends ConfigLoader {
    constructor(cspellIO: CSpellIO);
    get _cachedFiles(): Map<string, import("../../../Models/CSpellSettingsInternalDef.js").CSpellSettingsInternal>;
    get _cspellConfigExplorer(): {
        readonly search: (searchFrom?: string | undefined) => Promise<import("cosmiconfig/dist/types.js").CosmiconfigResult>;
        readonly load: (filepath: string) => Promise<import("cosmiconfig/dist/types.js").CosmiconfigResult>;
        readonly clearLoadCache: () => void;
        readonly clearSearchCache: () => void;
        readonly clearCaches: () => void;
    };
    get _cspellConfigExplorerSync(): {
        readonly search: (searchFrom?: string | undefined) => import("cosmiconfig/dist/types.js").CosmiconfigResult;
        readonly load: (filepath: string) => import("cosmiconfig/dist/types.js").CosmiconfigResult;
        readonly clearLoadCache: () => void;
        readonly clearSearchCache: () => void;
        readonly clearCaches: () => void;
    };
    readonly _readConfig: (fileRef: ImportFileRef) => import("@cspell/cspell-types").CSpellSettingsWithSourceTrace;
    readonly _normalizeSettings: (rawSettings: import("@cspell/cspell-types").CSpellSettingsWithSourceTrace, pathToSettingsFile: string, pnpSettings: import("../../../util/types.js").OptionalOrUndefined<import("@cspell/cspell-types").PnPSettings>) => import("../../../Models/CSpellSettingsInternalDef.js").CSpellSettingsInternal;
    normalizeSearchForConfigResultAsync(searchPath: string, searchResult: Promise<SearchForConfigResult | null>, pnpSettings: PnPSettingsOptional): Promise<NormalizeSearchForConfigResult>;
    normalizeSearchForConfigResult(searchPath: string, searchResult: SearchForConfigResult | ImportError | undefined, pnpSettings: PnPSettingsOptional): NormalizeSearchForConfigResult;
}
interface SearchForConfigResult {
    config: CSpellSettingsI | undefined;
    filepath: string;
    isEmpty?: boolean;
}
interface NormalizeSearchForConfigResult {
    config: CSpellSettingsI;
    filepath: string | undefined;
    error: ImportError | undefined;
}
/**
 *
 * @param searchFrom the directory / file to start searching from.
 * @param pnpSettings - related to Using Yarn PNP.
 * @returns the resulting settings
 */
export declare function searchForConfig(searchFrom: string | undefined, pnpSettings?: PnPSettingsOptional): Promise<CSpellSettingsI | undefined>;
/**
 *
 * @param searchFrom the directory / file to start searching from.
 * @param pnpSettings - related to Using Yarn PNP.
 * @returns the resulting settings
 * @deprecated
 * @deprecationMessage Use `searchForConfig`. It is very difficult to support Sync files when settings include web requests.
 */
export declare function searchForConfigSync(searchFrom: string | undefined, pnpSettings?: PnPSettingsOptional): CSpellSettingsI | undefined;
/**
 * Load a CSpell configuration files.
 * @param file - path or package reference to load.
 * @param pnpSettings - PnP settings
 * @returns normalized CSpellSettings
 */
export declare function loadConfig(file: string, pnpSettings?: PnPSettingsOptional): Promise<CSpellSettingsI>;
/**
 * Load a CSpell configuration files.
 * @param filename - path or package reference to load.
 * @param pnpSettings - PnP settings
 * @returns normalized CSpellSettings
 * @deprecated
 */
export declare function loadConfigSync(filename: string, pnpSettings?: PnPSettingsOptional): CSpellSettingsI;
export declare function loadPnP(pnpSettings: PnPSettingsOptional, searchFrom: Uri): Promise<LoaderResult>;
export declare function loadPnPSync(pnpSettings: PnPSettingsOptional, searchFrom: Uri): LoaderResult;
export declare function readRawSettings(filename: string, relativeTo?: string): CSpellSettingsWST;
export declare function getGlobalSettings(): CSpellSettingsI;
export declare function getCachedFileSize(): number;
export declare function clearCachedSettingsFiles(): void;
declare function validateRawConfigVersion(config: CSpellUserSettings | {
    version: unknown;
}, fileRef: ImportFileRef): void;
declare function validateRawConfigExports(config: CSpellUserSettings, fileRef: ImportFileRef): void;
export declare function createConfigLoader(cspellIO?: CSpellIO): ConfigLoader;
declare function getDefaultConfigLoaderInternal(): ConfigLoaderInternal;
export declare function getDefaultConfigLoader(): ConfigLoader;
export declare const __testing__: {
    getDefaultConfigLoaderInternal: typeof getDefaultConfigLoaderInternal;
    normalizeCacheSettings: typeof normalizeCacheSettings;
    validateRawConfigExports: typeof validateRawConfigExports;
    validateRawConfigVersion: typeof validateRawConfigVersion;
};
export {};
//# sourceMappingURL=configLoader.d.mts.map