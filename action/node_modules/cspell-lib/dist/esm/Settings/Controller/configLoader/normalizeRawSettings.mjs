import * as path from 'path';
import { resolveFile } from '../../../util/resolveFile.mjs';
import * as util from '../../../util/util.mjs';
import { mapDictDefsToInternal } from '../../DictionarySettings.mjs';
import { toGlobDef } from './toGlobDef.mjs';
export function normalizeRawConfig(config) {
    if (typeof config.version === 'number') {
        config.version = config.version.toString();
    }
}
export function normalizeDictionaryDefs(settings, pathToSettingsFile) {
    const dictionaryDefinitions = mapDictDefsToInternal(settings.dictionaryDefinitions, pathToSettingsFile);
    const languageSettings = settings.languageSettings?.map((langSetting) => util.clean({
        ...langSetting,
        dictionaryDefinitions: mapDictDefsToInternal(langSetting.dictionaryDefinitions, pathToSettingsFile),
    }));
    return util.clean({
        dictionaryDefinitions,
        languageSettings,
    });
}
export function normalizeOverrides(settings, pathToSettingsFile) {
    const { globRoot = path.dirname(pathToSettingsFile) } = settings;
    const overrides = settings.overrides?.map((override) => {
        const filename = toGlobDef(override.filename, globRoot, pathToSettingsFile);
        const { dictionaryDefinitions, languageSettings } = normalizeDictionaryDefs(override, pathToSettingsFile);
        return util.clean({
            ...override,
            filename,
            dictionaryDefinitions,
            languageSettings: normalizeLanguageSettings(languageSettings),
        });
    });
    return overrides ? { overrides } : {};
}
export function normalizeReporters(settings, pathToSettingsFile) {
    if (settings.reporters === undefined)
        return {};
    const folder = path.dirname(pathToSettingsFile);
    function resolve(s) {
        if (s === 'default')
            return s;
        const r = resolveFile(s, folder);
        if (!r.found) {
            throw new Error(`Not found: "${s}"`);
        }
        return r.filename;
    }
    function resolveReporter(s) {
        if (typeof s === 'string') {
            return resolve(s);
        }
        if (!Array.isArray(s) || typeof s[0] !== 'string')
            throw new Error('Invalid Reporter');
        // Preserve the shape of Reporter Setting while resolving the reporter file.
        const [r, ...rest] = s;
        return [resolve(r), ...rest];
    }
    return {
        reporters: settings.reporters.map(resolveReporter),
    };
}
export function normalizeLanguageSettings(languageSettings) {
    if (!languageSettings)
        return undefined;
    function fixLocale(s) {
        const { local: locale, ...rest } = s;
        return util.clean({ locale, ...rest });
    }
    return languageSettings.map(fixLocale);
}
export function normalizeGitignoreRoot(settings, pathToSettingsFile) {
    const { gitignoreRoot } = settings;
    if (!gitignoreRoot)
        return {};
    const dir = path.dirname(pathToSettingsFile);
    const roots = Array.isArray(gitignoreRoot) ? gitignoreRoot : [gitignoreRoot];
    return {
        gitignoreRoot: roots.map((p) => path.resolve(dir, p)),
    };
}
export function normalizeSettingsGlobs(settings, pathToSettingsFile) {
    const { globRoot } = settings;
    if (settings.ignorePaths === undefined)
        return {};
    const ignorePaths = toGlobDef(settings.ignorePaths, globRoot, pathToSettingsFile);
    return {
        ignorePaths,
    };
}
export function normalizeCacheSettings(settings, pathToSettingsDir) {
    const { cache } = settings;
    if (cache === undefined)
        return {};
    const { cacheLocation } = cache;
    if (cacheLocation === undefined)
        return { cache };
    return { cache: { ...cache, cacheLocation: resolveFilePath(cacheLocation, pathToSettingsDir) } };
}
function resolveFilePath(filename, pathToSettingsFile) {
    const cwd = process.cwd();
    return path.resolve(pathToSettingsFile, filename.replace('${cwd}', cwd));
}
