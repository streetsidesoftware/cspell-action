import { format } from 'util';
import { isErrnoException } from '../util/errors.mjs';
import { logError } from '../util/logger.mjs';
import { ConfigStore } from './cfgStore.mjs';
const packageName = 'cspell';
export function getRawGlobalSettings() {
    const name = 'CSpell Configstore';
    const globalConf = {
        source: {
            name,
            filename: undefined,
        },
    };
    try {
        // console.warn('%o', ConfigStore);
        const cfgStore = new ConfigStore(packageName);
        // console.warn('%o', cfgStore);
        const cfg = cfgStore.all;
        // Only populate globalConf is there are values.
        if (cfg && Object.keys(cfg).length) {
            Object.assign(globalConf, cfg);
            globalConf.source = {
                name,
                filename: cfgStore.path,
            };
        }
    }
    catch (error) {
        if (!isErrnoException(error) ||
            !error.code ||
            !['ENOENT', 'EACCES', 'ENOTDIR', 'EISDIR'].includes(error.code)) {
            logError(error);
        }
    }
    return globalConf;
}
export function writeRawGlobalSettings(settings) {
    const toWrite = {
        import: settings.import,
    };
    try {
        const cfgStore = new ConfigStore(packageName);
        cfgStore.set(toWrite);
        return undefined;
    }
    catch (error) {
        if (error instanceof Error)
            return error;
        return new Error(format(error));
    }
}
export function getGlobalConfigPath() {
    const cfgStore = new ConfigStore(packageName);
    return cfgStore.path;
}
