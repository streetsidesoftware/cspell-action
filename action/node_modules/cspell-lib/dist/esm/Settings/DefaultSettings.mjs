import { parsers } from 'cspell-grammar';
import { srcDirectory } from '../../lib-cjs/index.cjs';
import { createCSpellSettingsInternal } from '../Models/CSpellSettingsInternalDef.mjs';
import { PatternRegExp } from '../Models/PatternRegExp.mjs';
import { resolveFile } from '../util/resolveFile.mjs';
import { readSettings } from './Controller/configLoader/index.mjs';
import { mergeSettings } from './CSpellSettingsServer.mjs';
import * as LanguageSettings from './LanguageSettings.mjs';
import * as RegPat from './RegExpPatterns.mjs';
const defaultConfigFileModuleRef = '@cspell/cspell-bundled-dicts/cspell-default.json';
// Do not use require.resolve because webpack will mess it up.
const defaultConfigFile = resolveConfigModule(defaultConfigFileModuleRef);
const regExpSpellCheckerDisable = [
    new PatternRegExp(RegPat.regExSpellingGuardBlock),
    new PatternRegExp(RegPat.regExSpellingGuardLine),
    new PatternRegExp(RegPat.regExSpellingGuardNext),
];
// cspell:ignore filetypes
const predefinedPatterns = [
    // Exclude patterns
    { name: 'CommitHash', pattern: RegPat.regExCommitHash },
    { name: 'CommitHashLink', pattern: RegPat.regExCommitHashLink },
    { name: 'CStyleHexValue', pattern: RegPat.regExCStyleHexValue },
    { name: 'CSSHexValue', pattern: RegPat.regExCSSHexValue },
    { name: 'Urls', pattern: RegPat.regExMatchUrls },
    { name: 'HexValues', pattern: RegPat.regExMatchCommonHexFormats },
    { name: 'SpellCheckerDisable', pattern: regExpSpellCheckerDisable },
    { name: 'PublicKey', pattern: RegPat.regExPublicKey },
    { name: 'RsaCert', pattern: RegPat.regExCert },
    { name: 'SshRsa', pattern: RegPat.regExSshRSA },
    { name: 'EscapeCharacters', pattern: RegPat.regExEscapeCharacters },
    { name: 'Base64', pattern: RegPat.regExBase64 },
    { name: 'Base64SingleLine', pattern: RegPat.regExBase64SingleLine },
    { name: 'Base64MultiLine', pattern: RegPat.regExBase64MultiLine },
    { name: 'Email', pattern: RegPat.regExEmail },
    { name: 'SHA', pattern: RegPat.regExSha },
    { name: 'HashStrings', pattern: RegPat.regExHashStrings },
    { name: 'UnicodeRef', pattern: RegPat.regExUnicodeRef },
    { name: 'UUID', pattern: RegPat.regExUUID },
    { name: 'href', pattern: RegPat.regExHRef },
    { name: 'SpellCheckerDisableBlock', pattern: RegPat.regExSpellingGuardBlock },
    { name: 'SpellCheckerDisableLine', pattern: RegPat.regExSpellingGuardLine },
    { name: 'SpellCheckerDisableNext', pattern: RegPat.regExSpellingGuardNext },
    { name: 'SpellCheckerIgnoreInDocSetting', pattern: RegPat.regExIgnoreSpellingDirectives },
    // Include Patterns
    { name: 'PhpHereDoc', pattern: RegPat.regExPhpHereDoc },
    { name: 'string', pattern: RegPat.regExString },
    { name: 'CStyleComment', pattern: RegPat.regExCStyleComments },
    { name: 'Everything', pattern: '.*' },
];
const defaultRegExpPatterns = [...predefinedPatterns].map(normalizePattern);
const definedDefaultRegExpExcludeList = [
    'SpellCheckerDisable',
    'SpellCheckerIgnoreInDocSetting',
    'Urls',
    'Email',
    'RsaCert',
    'SshRsa',
    'Base64MultiLine',
    'Base64SingleLine',
    'CommitHash',
    'CommitHashLink',
    'CStyleHexValue',
    'CSSHexValue',
    'SHA',
    'HashStrings',
    'UnicodeRef',
    'UUID',
];
// This bit of copying is done to have the complier ensure that the defaults exist.
const defaultRegExpExcludeList = definedDefaultRegExpExcludeList;
export const _defaultSettingsBasis = Object.freeze(createCSpellSettingsInternal({
    id: 'static_defaults',
    language: 'en',
    name: 'Static Defaults',
    enabled: true,
    enabledLanguageIds: [],
    maxNumberOfProblems: 100,
    numSuggestions: 10,
    suggestionsTimeout: 500,
    suggestionNumChanges: 3,
    words: [],
    userWords: [],
    ignorePaths: [],
    allowCompoundWords: false,
    patterns: defaultRegExpPatterns,
    ignoreRegExpList: [],
    languageSettings: [],
    source: { name: 'defaultSettings' },
    reporters: [],
    plugins: [{ parsers }],
}));
export const _defaultSettings = Object.freeze(createCSpellSettingsInternal({
    ..._defaultSettingsBasis,
    enabledLanguageIds: [
        'ada',
        'csharp',
        'go',
        'javascript',
        'javascriptreact',
        'json',
        'markdown',
        'mdx',
        'php',
        'plaintext',
        'python',
        'text',
        'typescript',
        'typescriptreact',
        'haskell',
        'html',
        'css',
        'less',
        'scss',
        'latex',
        'ruby',
        'rust',
        'shellscript',
        'toml',
    ],
    ignoreRegExpList: defaultRegExpExcludeList,
    languageSettings: LanguageSettings.getDefaultLanguageSettings(),
}));
const getSettings = (function () {
    let settings = undefined;
    return function (useDefaultDictionaries) {
        if (!useDefaultDictionaries) {
            return _defaultSettingsBasis;
        }
        if (!settings) {
            const jsonSettings = readSettings(defaultConfigFile);
            settings = mergeSettings(_defaultSettings, jsonSettings);
            if (jsonSettings.name !== undefined) {
                settings.name = jsonSettings.name;
            }
            else {
                delete settings.name;
            }
        }
        return settings;
    };
})();
function resolveConfigModule(configModuleName) {
    return resolveFile(configModuleName, srcDirectory).filename;
}
function normalizePattern(pat) {
    const { name, pattern, description } = pat;
    if (!(pattern instanceof RegExp))
        return pat;
    return {
        name,
        pattern: new PatternRegExp(pattern),
        description,
    };
}
export function getDefaultSettings(useDefaultDictionaries = true) {
    return getSettings(useDefaultDictionaries);
}
export function getDefaultBundledSettings() {
    return getDefaultSettings();
}
