import { stringToRegExp } from '../util/textRegex.mjs';
import { isDefined } from '../util/util.mjs';
export function resolvePatterns(regExpList = [], patternDefinitions = []) {
    const patternMap = new Map(patternDefinitions.map((def) => [def.name.toLowerCase(), def.pattern]));
    const resolved = new Set();
    function resolvePattern(p) {
        if (resolved.has(p))
            return undefined;
        resolved.add(p);
        return patternMap.get(p.toString().toLowerCase()) || p;
    }
    function* flatten(patterns) {
        for (const pattern of patterns) {
            if (Array.isArray(pattern)) {
                yield* flatten(pattern.map(resolvePattern).filter(isDefined));
            }
            else {
                yield pattern;
            }
        }
    }
    const patternList = regExpList.map(resolvePattern).filter(isDefined);
    return [...flatten(patternList)].map(toRegExp).filter(isDefined);
}
function toRegExp(pattern) {
    return pattern instanceof RegExp ? new RegExp(pattern) : stringToRegExp(pattern, 'gim', 'g');
}
