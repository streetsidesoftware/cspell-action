// cSpell:enableCompoundWords
import { readLines } from './util/fileReader.mjs';
import { concatIterables, toIterableIterator } from './util/iterableIteratorLib.mjs';
import { logError } from './util/logger.mjs';
import * as Text from './util/text.mjs';
const regExpWordsWithSpaces = /^\s*\p{L}+(?:\s+\p{L}+){0,3}$/u;
/**
 * Reads words from a file. It will not throw and error.
 * @param filename the file to read
 */
export function loadWordsNoError(filename) {
    return readLines(filename).catch((e) => (logError(e), toIterableIterator([])));
}
export function splitLine(line) {
    return [...Text.extractWordsFromText(line)].map(({ text }) => text);
}
export function splitCodeWords(words) {
    return words.map(Text.splitCamelCaseWord).reduce((a, b) => a.concat(b), []);
}
export function splitLineIntoCodeWords(line) {
    const asMultiWord = regExpWordsWithSpaces.test(line) ? [line] : [];
    const asWords = splitLine(line);
    const splitWords = splitCodeWords(asWords);
    const wordsToAdd = new Set(concatIterables(asMultiWord, asWords, splitWords));
    return toIterableIterator(wordsToAdd);
}
export function splitLineIntoWords(line) {
    const asWords = splitLine(line);
    return concatIterables([line], asWords);
}
