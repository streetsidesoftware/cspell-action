export interface Uri {
    readonly scheme: string;
    readonly path: string;
    readonly authority?: string;
    readonly fragment?: string;
    readonly query?: string;
}
export interface UriInstance extends Uri {
    toString(): string;
}
export declare function toUri(uriOrFile: string | Uri | URL): UriInstance;
export declare function uriToFilePath(uri: Uri): string;
export declare function fromFilePath(file: string): UriInstance;
export declare function fromStdinFilePath(path?: string): UriInstance;
export declare const file: typeof fromFilePath;
export declare function parse(uri: string): UriInstance;
export declare function normalizeDriveLetter(path: string): string;
export declare function isUri(uri: unknown): uri is UriInstance;
export declare function basename(uri: Uri): string;
export declare function dirname(uri: Uri): UriInstance;
export declare function extname(uri: Uri): string;
export declare function joinPath(uri: Uri, ...paths: string[]): UriInstance;
export declare function resolvePath(uri: Uri, ...paths: string[]): UriInstance;
export declare function from(uri: Uri, ...parts: Partial<Uri>[]): UriInstance;
declare class UriImpl implements UriInstance {
    readonly scheme: string;
    readonly authority?: string;
    readonly path: string;
    readonly query?: string;
    readonly fragment?: string;
    constructor(uri: PartialWithUndefined<Uri>);
    toString(): string;
    toJson(): PartialWithUndefined<Uri>;
    with(change: Partial<Uri>): UriImpl;
    static isUri(uri: unknown): uri is UriImpl;
    static from(uri: Uri, ...parts: Partial<Uri>[]): UriImpl;
    static parse(uri: string): UriImpl;
    static file(filename: string): UriImpl;
    static stdin(filePath?: string): UriImpl;
}
declare function normalizeFilePath(path: string): string;
type PartialWithUndefined<T> = {
    [P in keyof T]?: T[P] | undefined;
};
export declare const __testing__: {
    UriImpl: typeof UriImpl;
    normalizeFilePath: typeof normalizeFilePath;
};
export {};
//# sourceMappingURL=Uri.d.mts.map