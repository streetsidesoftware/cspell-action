"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateRepository = exports.validateGrammarRepository = exports.validatePattern = exports.validatePatterns = exports.validate = void 0;
const assert_1 = require("assert");
const util_1 = require("util");
const grammarTypesHelpers_js_1 = require("./grammarTypesHelpers.js");
function validate(grammar) {
    (0, assert_1.strict)(grammar.scopeName);
    (0, assert_1.strict)(/^[\w.]*\.\w+$/.test(grammar.scopeName));
    const scopeExt = '.' + grammar.scopeName.split('.').pop();
    const context = {
        grammar,
        scopeExt,
    };
    validatePatterns(grammar.patterns, context);
    validateGrammarRepository(grammar, context);
}
exports.validate = validate;
function validatePatterns(patterns, context) {
    (0, assert_1.strict)(Array.isArray(patterns));
    patterns.forEach((p) => validatePatternOrReference(p, context));
}
exports.validatePatterns = validatePatterns;
function validatePatternOrReference(pattern, context) {
    if (typeof pattern === 'string') {
        (0, assert_1.strict)(/^\$self|\$base|#[\w-]+|[\w.]+$/.test(pattern));
    }
    else {
        validatePattern(pattern, context);
    }
}
function validatePattern(pattern, context) {
    (0, assert_1.strict)((0, grammarTypesHelpers_js_1.isPatternMatch)(pattern) ||
        (0, grammarTypesHelpers_js_1.isPatternBeginEnd)(pattern) ||
        (0, grammarTypesHelpers_js_1.isPatternInclude)(pattern) ||
        (0, grammarTypesHelpers_js_1.isPatternPatterns)(pattern), (0, util_1.format)('Unknown Pattern: %o', pattern));
    (0, assert_1.strict)(!((0, grammarTypesHelpers_js_1.isPatternBeginEnd)(pattern) && (0, grammarTypesHelpers_js_1.isPatternMatch)(pattern)), (0, util_1.format)('Pattern must be a Match pattern or a Begin/End pattern, but not both: %o', pattern));
    validatePatternName(pattern, context);
}
exports.validatePattern = validatePattern;
function validateGrammarRepository(p, context) {
    p.repository && validateRepository(p.repository, context);
}
exports.validateGrammarRepository = validateGrammarRepository;
function validateRepository(r, context) {
    (0, assert_1.strict)(typeof r === 'object');
    for (const [key, pat] of Object.entries(r)) {
        (0, assert_1.strict)(/^[\w.-]+$/.test(key), 'Invalid Repository key, must be `a-zA-Z0-9`, `.`, `-`');
        validatePattern(pat, context);
    }
}
exports.validateRepository = validateRepository;
function validatePatternName(p, context) {
    (0, assert_1.strict)(isValidPatternName(p.name), (0, util_1.format)('Invalid pattern name: %o', p));
    (0, assert_1.strict)(p.name === undefined || p.name.endsWith(context.scopeExt), (0, util_1.format)('Pattern name ending must match grammar scope ending. Grammar scope: "%s"; Pattern: %o', context.grammar.scopeName, p));
}
function isValidPatternName(name) {
    if (name === undefined)
        return true;
    if (typeof name !== 'string')
        return false;
    return /^[-\w.]+$/.test(name);
}
//# sourceMappingURL=validateGrammar.js.map