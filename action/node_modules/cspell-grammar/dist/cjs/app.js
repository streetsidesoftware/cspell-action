"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const index_js_1 = require("./parsers/typescript/index.js");
const parsers = {
    '.ts': index_js_1.parser,
};
/**
 * Run simple parser
 * @param args -- command line arguments
 * @returns Promise
 */
async function run(args) {
    // early out if there are not enough arguments
    if (args.length < 3) {
        console.log('usage...');
        return;
    }
    const filename = args.slice(2).filter((p) => !p.startsWith('-'))[0];
    if (!filename) {
        console.log('filename missing');
        return;
    }
    const ext = path.extname(filename);
    const parser = parsers[ext];
    if (!parser) {
        console.log(`No parser for ${path.basename(filename)}`);
        return;
    }
    console.log(`File: ${path.basename(filename)} Parser: ${parser.name}`);
    const content = await fs_1.promises.readFile(filename, 'utf-8');
    const result = parser.parse(content, filename);
    for (const pt of result.parsedTexts) {
        emit(pt);
    }
}
exports.run = run;
function emit(pt) {
    const t = pt.text.replace(/\t/g, '↦').replace(/\r?\n/g, '↩︎').replace(/\r/g, '⇠');
    console.log(`${pt.range[0]}-${pt.range[1]}\t${t}\t${pt.scope?.toString() || ''}`);
}
//# sourceMappingURL=app.js.map